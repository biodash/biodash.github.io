<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Broe | BioDASH</title>
    <link>https://biodash.github.io/authors/michael-broe/</link>
      <atom:link href="https://biodash.github.io/authors/michael-broe/index.xml" rel="self" type="application/rss+xml" />
    <description>Michael Broe</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language>
    <image>
      <url>https://biodash.github.io/authors/michael-broe/avatar_hu13632d739ac05d9f7c100f25ef9127c7_976850_270x270_fill_q90_lanczos_center.jpg</url>
      <title>Michael Broe</title>
      <link>https://biodash.github.io/authors/michael-broe/</link>
    </image>
    
    <item>
      <title>Chapter 10 - Visualizing Data, 1</title>
      <link>https://biodash.github.io/codeclub/s05e08_ggplot-1/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s05e08_ggplot-1/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the philosophy of &lt;strong&gt;coding&lt;/strong&gt; a graphic.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a &lt;strong&gt;ggplot2&lt;/strong&gt; graphic, so you can reuse it for multiple chart types.&lt;/li&gt;
&lt;li&gt;Learn how you can quickly add visual information to a graphic using &lt;strong&gt;aesthetics&lt;/strong&gt; and &lt;strong&gt;layers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-the-ggplot2-philosophy&#34;&gt;Intro: The ggplot2 philosophy&lt;/h2&gt;
&lt;p&gt;We have already seen that in R, instead of manually manipulating data frames as you might do when editing Excel sheets, we &lt;strong&gt;code&lt;/strong&gt; the operations we want to perform using &lt;strong&gt;dplyr&lt;/strong&gt; verbs like &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;summarize()&lt;/code&gt;&lt;/a&gt;, and so on.&lt;/p&gt;
&lt;p&gt;In a similar way when performing visualization, instead of clicking on a chart type in Excel, we &lt;strong&gt;code the chart&lt;/strong&gt; in R.&lt;/p&gt;
&lt;p&gt;And just as &lt;strong&gt;dplyr&lt;/strong&gt; gives us efficient ways to manipulate data frames, &lt;strong&gt;ggplot2&lt;/strong&gt; (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics (we use these terms interchangeably).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;gg&lt;/strong&gt; in &lt;strong&gt;ggplot2&lt;/strong&gt; stands for &lt;em&gt;grammar of graphics&lt;/em&gt;, a systematic approach for designing statistical plots developed by Leland Wilkinson. The idea behind this was to think about &amp;lsquo;pulling apart&amp;rsquo; various plots into their shared component pieces, then provide code that could put them together again. We can then create new plots like we create new sentences (once we understand this grammar).&lt;/p&gt;
&lt;p&gt;There are two parts to this. First, the &amp;lsquo;nouns and verbs&amp;rsquo; we need to work with plots are very different than those we need to work with data frames. &lt;strong&gt;ggplot2&lt;/strong&gt; is like a mini-language of its own, with its own verbs and syntax.&lt;/p&gt;
&lt;p&gt;Second, this notion of pulling apart a graphic leads to the idea of &lt;em&gt;layers&lt;/em&gt;. You can build up a plot of any complexity by &lt;em&gt;overlaying&lt;/em&gt; different views of the same data.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a learning curve here for sure, but there are a couple of things that help us.&lt;/p&gt;
&lt;p&gt;First, every graphic shares a &lt;em&gt;common template&lt;/em&gt;. This is like thinking about the sentence &amp;ldquo;The cat sat on the mat&amp;rdquo; grammatically as the template &lt;code&gt;NP V PP&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt;oun &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;The cat&amp;rdquo;, &lt;code&gt;V&lt;/code&gt;erb &amp;ldquo;sat&amp;rdquo;, &lt;code&gt;P&lt;/code&gt;repositional &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;on the mat&amp;rdquo;). Once you understand this structure you can &amp;ldquo;say&amp;rdquo; a &lt;em&gt;lot&lt;/em&gt; of different things.&lt;/p&gt;
&lt;p&gt;(And I mean a &lt;em&gt;lot&lt;/em&gt;. The &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot cheat sheet&lt;/a&gt; lists over 40 plot-types, but because this is a language, users can create their own &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensions&lt;/a&gt; that you can also utilize, adding over 80 more.)&lt;/p&gt;
&lt;p&gt;Second, the way we put layers together is identical to the way we use pipes. You can read &lt;code&gt;%&amp;gt;%&lt;/code&gt; as &amp;ldquo;and then&amp;rdquo;: &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; &lt;em&gt;and then&lt;/em&gt; &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt; &lt;em&gt;and then&lt;/em&gt; &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;summarize()&lt;/code&gt;&lt;/a&gt;. In graphics, we can say &amp;ldquo;show this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer&amp;rdquo;, etc., using a very similar syntax.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;So how does this work in practice? We&amp;rsquo;ll work through visualizing the &lt;strong&gt;iris&lt;/strong&gt; dataset that you&amp;rsquo;ve seen before. This is an extremely famous &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Iris_flower_data_set&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt; that was first analyzed by R. A. Fisher in 1936: &lt;em&gt;The use of multiple measurements in taxonomic problems&lt;/em&gt;. He was attempting to use petal and sepal measurements to discriminate one species from another.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt; is part of the tidyverse package so we need to load that first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;# this assumes you&#39;ve already installed tidyverse&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt; ─────────────────────────────────────── tidyverse 1.3.2 ──&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt; 3.4.0      &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt; 1.0.1 &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt; 3.1.8      &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt; 1.0.10&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt; 1.2.1      &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt; 1.5.0 &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt; 2.1.3      &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt; 0.5.2 &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt; masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;    masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::lag()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And recall that the &lt;strong&gt;iris&lt;/strong&gt; dataset (3 species, 50 observations per species) is automatically available to us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2          4.9         3.0          1.4         0.2  setosa&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3          4.7         3.2          1.3         0.2  setosa&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4          4.6         3.1          1.5         0.2  setosa&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5          5.0         3.6          1.4         0.2  setosa&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6          5.4         3.9          1.7         0.4  setosa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What is the correlation between petal length and width in these species? Are longer petals also wider? We can visualize this with a scatterplot. But first let&amp;rsquo;s look a the ggplot template. (Note the package is &lt;strong&gt;ggplot2&lt;/strong&gt;, the command is &lt;code&gt;ggplot&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = &amp;lt;DATA&amp;gt;) + 
  &amp;lt;GEOM_FUNCTION&amp;gt;(mapping = aes(&amp;lt;MAPPINGS&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the obligatory parts of any plot. The first argument to &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/ggplot.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ggplot()&lt;/code&gt;&lt;/a&gt; is the data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is not very interesting! but it&amp;rsquo;s notable that it is &lt;em&gt;something&lt;/em&gt;. &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/ggplot.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ggplot()&lt;/code&gt;&lt;/a&gt; has created a base coordinate system (a base layer) that we can add visual layers to. The &lt;em&gt;add a layer&lt;/em&gt; operator is &amp;ldquo;&lt;strong&gt;+&lt;/strong&gt;&amp;rdquo;, which is the ggplot equivalent of the pipe symbol, and &lt;strong&gt;it must occur at the end of the line&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The next argument specifies the kind plot we want: scatterplot, bar chart, fitted line, boxplot, pie chart, etc. &lt;strong&gt;ggplot2&lt;/strong&gt; refers to these as &lt;strong&gt;geoms&lt;/strong&gt;: the geometrical object that a plot uses to represent data. You can see an overview of many of these geoms in the &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheet&lt;/a&gt;. The geom for a scatterplot is &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/geom_point.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;geom_point()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But we also require a &lt;code&gt;mapping&lt;/code&gt; argument, which maps the &lt;em&gt;variables&lt;/em&gt; in the dataset we want to focus on to their &lt;em&gt;visual representation&lt;/em&gt; in the plot.&lt;/p&gt;
&lt;p&gt;And finally we need to specify an &lt;strong&gt;aesthetic&lt;/strong&gt; for the geometric objects in the plot, which will control things like shape, color, transparency, etc. Perhaps surprisingly, for a scatterplot, the x and y coordinates are aesthetics, since these control, not the shape or color, but the relative position of the points in the coordinate system.&lt;/p&gt;
&lt;p&gt;Here is our complete plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly a positive correlation between length and width. And we can make this even more apparent by visually fitting a line to the data, by &lt;em&gt;overlaying&lt;/em&gt; another geom in the same plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_smooth.html&#39;&gt;geom_smooth&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-5-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly some code redundancy here, and we really don&amp;rsquo;t want the x, y mapping of these two layers to be independent. We can extract the common mapping information and move it to the top level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;, mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_smooth.html&#39;&gt;geom_smooth&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So we have the possibility of &lt;em&gt;local&lt;/em&gt; layer specifications, and &lt;em&gt;global&lt;/em&gt; specifications. Global specifications are &lt;em&gt;inherited&lt;/em&gt; by all the local layers.&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-aesthetics&#34;&gt;The power of aesthetics&lt;/h3&gt;
&lt;p&gt;The aim of Fisher&amp;rsquo;s paper was to try to discriminate different species based on their morphological measurements. It looks from this plot that there are two distinct clusters. Do these clusters correspond to different species? There are two clusters, but three species. How can we explore this further?&lt;/p&gt;
&lt;p&gt;Our current plot uses two numeric variables: &lt;code&gt;Petal.Length&lt;/code&gt; and &lt;code&gt;Petal.width&lt;/code&gt;. We can add a third categorical variable, like &lt;code&gt;Species&lt;/code&gt;, to a two dimensional scatterplot by mapping it to a different visual aesthetic. We&amp;rsquo;ve mapped length and width to x,y coordinates. Now we&amp;rsquo;ll simultaneously map species to &lt;code&gt;color&lt;/code&gt; by expanding our list of aesthetics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The R help for a specific geoms will list, among other things, all the aesthetics that geom supports.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout Rooms&lt;/h2&gt;
&lt;p&gt;In the exercises we&amp;rsquo;ll be looking a little more at the &lt;strong&gt;iris&lt;/strong&gt; data, and in addition, the NHANES data we used last week, and the left-joined bird dataset we built &lt;a href=&#34;https://biodash.github.io/codeclub/03_joining-datasets/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;some time ago&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please install the NHANES dataset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;NHANES&#34;&lt;/span&gt;, repos &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;http://cran.us.r-project.org&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once installed, load it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A prebuilt joined data set on birds can be downloaded using the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;# create a data directory for the new file if you haven&#39;t done so yet:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;data/birds&#34;&lt;/span&gt;, recursive &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;# set the url&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/S05E08_ggplot-1/joined_data.tsv&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;# set the path for the downloaded file&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;data/birds/joined_data.tsv&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#download to file&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;# read file&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://readr.tidyverse.org/reference/read_delim.html&#39;&gt;read_tsv&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;font-weight: bold;&#39;&gt;Rows: &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;311441&lt;/span&gt; &lt;span style=&#39;font-weight: bold;&#39;&gt;Columns: &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BBBB;&#39;&gt;──&lt;/span&gt; &lt;span style=&#39;font-weight: bold;&#39;&gt;Column specification&lt;/span&gt; &lt;span style=&#39;color: #00BBBB;&#39;&gt;────────────────────────────────────────────────────────&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;font-weight: bold;&#39;&gt;Delimiter:&lt;/span&gt; &#34;\t&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;chr&lt;/span&gt;  (4): species, locality, stateProvince, species_en&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;dbl&lt;/span&gt;  (4): adult_body_mass_g, adult_svl_cm, longevity_y, litter_or_clutch_size_n&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dttm&lt;/span&gt; (1): eventDate&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BBBB;&#39;&gt;ℹ&lt;/span&gt; Use `spec()` to retrieve the full column specification for this data.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BBBB;&#39;&gt;ℹ&lt;/span&gt; Specify the column types or set `show_col_types = FALSE` to quiet this message.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data set, and plot sepal width (y) against sepal length (x) colored by species. Which morphological character, petals or sepals, provides the greatest discrimination between species?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Simply reuse the code we used for petals. You can often leverage code from an old plot for a new one. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note this solution shows yet another way to position global mapping information: as its own layer. This can help readability and avoid too many nested parentheses.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the NHANES data set to plot body mass index (y) against height (x). Color by gender. Which gender has the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;&lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Gender&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (`geom_point()`).&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the same plot but now color by physical activity. How active are those people with the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Again, &lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;PhysActive&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (`geom_point()`).&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Often plotting the data allows us to identify outliers, which may be data-entry errors, or genuinely extreme data. Using the &lt;code&gt;joined_data&lt;/code&gt; set, plot adult body mass (y) against longevity (x). Identify extreme data points at the high end of body mass. How can we identify what these points represent?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Examine the plot to find an appropriate threshold value, and filter the data using that value. How many data points are there passing that threshold? What species are represented by these data points? How many weights are reported? Why is the plot misleading here? &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_point.html&#39;&gt;geom_point&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;longevity_y&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 24089 rows containing missing values (`geom_point()`).&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-15-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 228 × 9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    species   local…¹ state…² eventDate           speci…³ adult…⁴ adult…⁵ longe…⁶&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;              &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; Cygnus o… Findlay Ohio    2008-02-17 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt; Cygnus o… Dundee  Ohio    2004-02-16 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; Cygnus o… 44805 … Ohio    2006-02-18 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; Cygnus o… 45011 … Ohio    2005-02-19 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt; Cygnus b… 45042 … Ohio    2009-02-13 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Trumpe…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;300    159.    26.5&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt; Cygnus o… 44813 … Ohio    2007-02-19 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt; Cygnus o… Spencer Ohio    2008-02-16 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt; Cygnus o… 44903 … Ohio    2009-02-16 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; Cygnus o… 44601 … Ohio    2002-02-16 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt; Cygnus o… Avon L… Ohio    2007-02-17 &lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt; Mute S…   &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230    142.    27.7&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 218 more rows, 1 more variable: litter_or_clutch_size_n &amp;lt;dbl&amp;gt;, and&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   abbreviated variable names ¹​locality, ²​stateProvince, ³​species_en,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ⁴​adult_body_mass_g, ⁵​adult_svl_cm, ⁶​longevity_y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/distinct.html&#39;&gt;distinct&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 × 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species          &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;            &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt; Cygnus olor      &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt; Cygnus buccinator&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/distinct.html&#39;&gt;distinct&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 × 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_body_mass_g&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;               &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;             &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;230&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;             &lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;300&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h3 id=&#34;bonus-exercise-a-new-geom&#34;&gt;Bonus exercise: a new geom!&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data and generate a density histogram for sepal length, categorized by species.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Use &lt;code&gt;geom_density()&lt;/code&gt;. Check the help to see what aesthetics it supports. Note that while you &#39;color&#39; a point, you &#39;fill&#39; an area. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/ggplot.html&#39;&gt;ggplot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/aes.html&#39;&gt;aes&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://ggplot2.tidyverse.org/reference/geom_density.html&#39;&gt;geom_density&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-19-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note, what does the &lt;strong&gt;alpha&lt;/strong&gt; aesthetic control? &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>S04E10 and S04E11: R for Data Science - Chapters 5.3 and 5.4</title>
      <link>https://biodash.github.io/codeclub/s04e10-11_r4ds-ch5-4/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s04e10-11_r4ds-ch5-4/</guid>
      <description>&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Use this to download the R Markdown:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;rmd_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/assets/scripts/Arrange%2C%20Select.Rmd&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rmd_file&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;arrange_select.Rmd&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Today we are going to finish off the material on the dplyr function &lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/a&gt; that we didn&amp;rsquo;t get to last week, and introduce a new dplyr function &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The way I am presenting this is through an RMarkdown document, to interactively explore the material in these two sections of Chapter 5, Data transformation&lt;/p&gt;
&lt;p&gt;Recall that for all dplyr data manipulation functions there is a common template:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the first argument of the function is the input data frame&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the next arguments say what you want to do with that data frame, using variable names (no quotes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the result is a new dataframe&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that all these functions have a common template makes it possible to chain steps together, to make complex code chunks out of simple steps, one step at a time, as we will see below.&lt;/p&gt;
&lt;p&gt;We will again be using the &lt;code&gt;nycflights13&lt;/code&gt; and &lt;code&gt;tidyverse&lt;/code&gt; packages, so we first need make sure these packages are installed, and then load them for the current session by doing &lt;a href=&#34;https://rdrr.io/r/base/library.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;library()&lt;/code&gt;&lt;/a&gt; commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://github.com/hadley/nycflights13&#39;&gt;nycflights13&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;arrange&#34;&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Refer to the biodash page to see where we left off:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://biodash.github.io/codeclub/s04e09_r4ds-ch5-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S04E08: R for Data Science - Chapter 5.1 - 5.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/a&gt; is the equivalent of the Excel &lt;code&gt;sort&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;So what happens if just &amp;lsquo;arrange&amp;rsquo; flights (the data frame) with no other arguments?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/arrange.html&#39;&gt;arrange&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      517        515       2     830     819      11 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      533        529       4     850     830      20 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      542        540       2     923     850      33 AA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      544        545      -&lt;span style=&#39;color: #BB0000;&#39;&gt;1&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022     -&lt;span style=&#39;color: #BB0000;&#39;&gt;18&lt;/span&gt; B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      554        600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;     812     837     -&lt;span style=&#39;color: #BB0000;&#39;&gt;25&lt;/span&gt; DL     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      554        558      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     740     728      12 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      555        600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt;     913     854      19 B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      557        600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     709     723     -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt; EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      557        600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     838     846      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt; B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      558        600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;     753     745       8 AA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows, 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nothing changes. This is identical to the original data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 6 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      517         515       2     830     819      11 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      533         529       4     850     830      20 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      542         540       2     923     850      33 AA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      544         545      -&lt;span style=&#39;color: #BB0000;&#39;&gt;1&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022     -&lt;span style=&#39;color: #BB0000;&#39;&gt;18&lt;/span&gt; B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      554         600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;     812     837     -&lt;span style=&#39;color: #BB0000;&#39;&gt;25&lt;/span&gt; DL     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      554         558      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     740     728      12 UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names ¹​sched_dep_time,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But there a whole bunch of variables we can sort by. An easy way to see them is using the &lt;a href=&#34;https://pillar.r-lib.org/reference/glimpse.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;glimpse()&lt;/code&gt;&lt;/a&gt; function, which basically puts the &amp;lsquo;columns into rows&amp;rsquo;, so you can see them more easily, without scrolling off the screen. This is a great way to see just what the columns are in a complex data frame that you inherit from someone or other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://pillar.r-lib.org/reference/glimpse.html&#39;&gt;glimpse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; Rows: 336,776&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; Columns: 19&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ year           &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ month          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ day            &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ dep_time       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ sched_dep_time &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ dep_delay      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ arr_time       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ sched_arr_time &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ arr_delay      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ carrier        &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &#34;UA&#34;, &#34;UA&#34;, &#34;AA&#34;, &#34;B6&#34;, &#34;DL&#34;, &#34;UA&#34;, &#34;B6&#34;, &#34;EV&#34;, &#34;B6&#34;, &#34;…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ flight         &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ tailnum        &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &#34;N14228&#34;, &#34;N24211&#34;, &#34;N619AA&#34;, &#34;N804JB&#34;, &#34;N668DN&#34;, &#34;N394…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ origin         &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &#34;EWR&#34;, &#34;LGA&#34;, &#34;JFK&#34;, &#34;JFK&#34;, &#34;LGA&#34;, &#34;EWR&#34;, &#34;EWR&#34;, &#34;LGA&#34;,…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ dest           &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &#34;IAH&#34;, &#34;IAH&#34;, &#34;MIA&#34;, &#34;BQN&#34;, &#34;ATL&#34;, &#34;ORD&#34;, &#34;FLL&#34;, &#34;IAD&#34;,…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ air_time       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ distance       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ hour           &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ minute         &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ time_hour      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Notice there are 19 columns).&lt;/p&gt;
&lt;p&gt;Say we wanted to sort by month, and pull all the &amp;lsquo;Christmassy&amp;rsquo; flights to the top. We can arrange by month, &lt;em&gt;and&lt;/em&gt; sort descending:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/arrange.html&#39;&gt;arrange&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/desc.html&#39;&gt;desc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1       13       &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;359      14     446     445       1 B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1       17       &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;359      18     443     437       6 B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      453        500      -&lt;span style=&#39;color: #BB0000;&#39;&gt;7&lt;/span&gt;     636     651     -&lt;span style=&#39;color: #BB0000;&#39;&gt;15&lt;/span&gt; US     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      520        515       5     749     808     -&lt;span style=&#39;color: #BB0000;&#39;&gt;19&lt;/span&gt; UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      536        540      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     845     850      -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt; AA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      540        550     -&lt;span style=&#39;color: #BB0000;&#39;&gt;10&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;005    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;027     -&lt;span style=&#39;color: #BB0000;&#39;&gt;22&lt;/span&gt; B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      541        545      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     734     755     -&lt;span style=&#39;color: #BB0000;&#39;&gt;21&lt;/span&gt; EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      546        545       1     826     835      -&lt;span style=&#39;color: #BB0000;&#39;&gt;9&lt;/span&gt; UA     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      549        600     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt;     648     659     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt; US     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      550        600     -&lt;span style=&#39;color: #BB0000;&#39;&gt;10&lt;/span&gt;     825     854     -&lt;span style=&#39;color: #BB0000;&#39;&gt;29&lt;/span&gt; B6     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows, 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And now say we want to just order the Christmas flights coming into Columbus. We can first &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;CMH&lt;/code&gt;, and then chain (pipe) that filter statement into arrange, using the &lt;strong&gt;pipe&lt;/strong&gt; notation.&lt;/p&gt;
&lt;p&gt;First filter on destination &lt;code&gt;CMH&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dest&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;CMH&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 3,524 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1      805        815     -&lt;span style=&#39;color: #BB0000;&#39;&gt;10&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;006    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;010      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;107       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;115      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;305    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;310      -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;153       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;159      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;350    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;341       9 EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;257       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;300      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;454    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;450       4 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;458       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;500      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;658    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;655       3 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;459       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;501      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;651    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;651       0 EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;522       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;530      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;731    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;725       6 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;759       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;759       0    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;957    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;949       8 EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;816       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;805      11    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;955      18 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;008       &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;015      -&lt;span style=&#39;color: #BB0000;&#39;&gt;7&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;206    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;210      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 3,514 more rows, 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Notice we now have only 3,524 rows, as opposed to 336,776 in the full data frame).&lt;/p&gt;
&lt;p&gt;We can pass that output data frame on to &lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/a&gt; using the &amp;lsquo;pipe symbol&amp;rsquo; &lt;code&gt;%&amp;gt;%&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dest&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;CMH&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/arrange.html&#39;&gt;arrange&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/desc.html&#39;&gt;desc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 3,524 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1      644        614      30     836     805      31 EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;129       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;135      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;316    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;330     -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;253       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;259      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;435    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;454     -&lt;span style=&#39;color: #BB0000;&#39;&gt;19&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;328       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;326       2    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;507    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;524     -&lt;span style=&#39;color: #BB0000;&#39;&gt;17&lt;/span&gt; EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;513       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;515      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;709    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;720     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;629       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;455      94    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;822    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;650      92 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;728       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;730      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;918    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;925      -&lt;span style=&#39;color: #BB0000;&#39;&gt;7&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;922       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;102    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;130     -&lt;span style=&#39;color: #BB0000;&#39;&gt;28&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     1     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;951       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930      21    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;121    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;115       6 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     2      622        610      12     759     801      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt; EV     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 3,514 more rows, 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So this is a first example of chaining together simple steps, to get a more complex result.&lt;/p&gt;
&lt;p&gt;Finally, with arrange, you can add other variables to &amp;lsquo;break ties&amp;rsquo;. In the following example, we first sort on &lt;code&gt;month&lt;/code&gt; (descending), and &lt;em&gt;then&lt;/em&gt; sort on &lt;code&gt;dep_delay&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dest&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;CMH&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/arrange.html&#39;&gt;arrange&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/desc.html&#39;&gt;desc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dep_delay&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 3,524 × 19&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     4     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;910       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930     -&lt;span style=&#39;color: #BB0000;&#39;&gt;20&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;101    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;130     -&lt;span style=&#39;color: #BB0000;&#39;&gt;29&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12     7     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;243       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;259     -&lt;span style=&#39;color: #BB0000;&#39;&gt;16&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;434    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;454     -&lt;span style=&#39;color: #BB0000;&#39;&gt;20&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    18     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;715       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;730     -&lt;span style=&#39;color: #BB0000;&#39;&gt;15&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;919    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;925      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    26     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;918       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930     -&lt;span style=&#39;color: #BB0000;&#39;&gt;12&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;116    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;130     -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    27     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;918       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930     -&lt;span style=&#39;color: #BB0000;&#39;&gt;12&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;057    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;130     -&lt;span style=&#39;color: #BB0000;&#39;&gt;33&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    10     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;504       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;515     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;731    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;720      11 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    12     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;719       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;730     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;937    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;925      12 MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    16     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;919       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;930     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;108    &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;130     -&lt;span style=&#39;color: #BB0000;&#39;&gt;22&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    31     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;444       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;455     -&lt;span style=&#39;color: #BB0000;&#39;&gt;11&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;637    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;650     -&lt;span style=&#39;color: #BB0000;&#39;&gt;13&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013    12    12     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;125       &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;135     -&lt;span style=&#39;color: #BB0000;&#39;&gt;10&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;321    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;330      -&lt;span style=&#39;color: #BB0000;&#39;&gt;9&lt;/span&gt; MQ     &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 3,514 more rows, 9 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated variable names&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;break-out-exercises&#34;&gt;Break out exercises:&lt;/h2&gt;
&lt;p&gt;Again, see here: &lt;a href=&#34;https://biodash.github.io/codeclub/s04e09_r4ds-ch5-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S04E08: R for Data Science - Chapter 5.1 - 5.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;at the bottom of the page, under &lt;strong&gt;III &amp;ndash; Chapter 5.3: arrange()&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;select&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The previous data manipulation functions we&amp;rsquo;ve looked at, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/a&gt;, work on observations (i.e. rows).&lt;/p&gt;
&lt;p&gt;The next function we&amp;rsquo;ll look at, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;, works on directly on variables (i.e. columns).&lt;/p&gt;
&lt;p&gt;If you have hundreds of columns in a data frame (many of which you may not be interested in for the current analysis) you can &lt;strong&gt;subset&lt;/strong&gt; the columns. We saw above that &lt;code&gt;flights&lt;/code&gt; has 19 columns. This is a serious example in terms of rows (336,776), but pretty trivial in terms of columns. But it&amp;rsquo;s still a good toy example.&lt;/p&gt;
&lt;p&gt;It will be useful to import this example data frame into our local Environment so we can visualize it in RStudio (at the moment it is just &amp;lsquo;floating&amp;rsquo; out there in the system: we can access it, but we can&amp;rsquo;t see it).&lt;/p&gt;
&lt;p&gt;So after:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://github.com/hadley/nycflights13&#39;&gt;nycflights13&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We want to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;my_flights&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(We&amp;rsquo;ve just created a personal &amp;lsquo;local object&amp;rsquo; data frame in our current session, pulling in data from the &lt;code&gt;nycflights13&lt;/code&gt; package). And it should appear in the Environment tab in RStudio.&lt;/p&gt;
&lt;p&gt;So, how can we focus on a subset of variables in the flights data frame? One way is to explicitly name the columns you want to &lt;strong&gt;keep&lt;/strong&gt; using the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; function (remember, the first argument is the data frame; the following arguments are the column names):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;year&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;day&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Often this is fine, but as you move on to larger data sets, you might want to use various &lt;em&gt;selection features&lt;/em&gt; instead of just explictly listing want you want to keep.&lt;/p&gt;
&lt;p&gt;These are listed if you do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;o&#39;&gt;?&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;select&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;These use the same syntax and semantics as &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; for rows, using the same logical combinations.&lt;/p&gt;
&lt;h4 id=&#34;selection-features&#34;&gt;Selection features&lt;/h4&gt;
&lt;h5 id=&#34;-range&#34;&gt;&lt;code&gt;:&lt;/code&gt; &amp;lsquo;range&amp;rsquo;&lt;/h5&gt;
&lt;p&gt;You can select a &lt;strong&gt;range&lt;/strong&gt; of columns using the &lt;code&gt;:&lt;/code&gt; range operator. This is really only efficient if the original data frame is organized in a way that is useful for your purposes. The good news is that don&amp;rsquo;t have to select all varibles explicitly, one by one. The range operator selects &lt;em&gt;consecutive&lt;/em&gt; variables in the data frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;year&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;day&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the &lt;code&gt;month&lt;/code&gt; variable is automatically included, even though it&amp;rsquo;s not mentioned in the select statement.&lt;/p&gt;
&lt;p&gt;But there is more organization in this data frame. Say we wanted to drill down just into the departure and arrival times:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dep_time&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;arr_delay&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;      517            515         2      830            819        11&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;      533            529         4      850            830        20&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;      542            540         2      923            850        33&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;      544            545        -&lt;span style=&#39;color: #BB0000;&#39;&gt;1&lt;/span&gt;     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004           &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022       -&lt;span style=&#39;color: #BB0000;&#39;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;      554            600        -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;      812            837       -&lt;span style=&#39;color: #BB0000;&#39;&gt;25&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;      554            558        -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;      740            728        12&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;      555            600        -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt;      913            854        19&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;      557            600        -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;      709            723       -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;      557            600        -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;      838            846        -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;      558            600        -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;      753            745         8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&#34;-complement&#34;&gt;&lt;code&gt;!&lt;/code&gt; &amp;lsquo;complement&amp;rsquo;&lt;/h5&gt;
&lt;p&gt;You can also drop columns (and ranges of columns) using the logical &lt;code&gt;complement&lt;/code&gt; sign:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;year&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;day&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_t…¹ sched…² dep_d…³ arr_t…⁴ sched…⁵ arr_d…⁶ carrier flight tailnum origin&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;     517     515       2     830     819      11 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;545 N14228  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;     533     529       4     850     830      20 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;714 N24211  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;     542     540       2     923     850      33 AA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;141 N619AA  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;     544     545      -&lt;span style=&#39;color: #BB0000;&#39;&gt;1&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022     -&lt;span style=&#39;color: #BB0000;&#39;&gt;18&lt;/span&gt; B6         725 N804JB  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;     554     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;     812     837     -&lt;span style=&#39;color: #BB0000;&#39;&gt;25&lt;/span&gt; DL         461 N668DN  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;     554     558      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     740     728      12 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;696 N39463  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;     555     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt;     913     854      19 B6         507 N516JB  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;     557     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     709     723     -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt; EV        &lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt;708 N829AS  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;     557     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     838     846      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt; B6          79 N593JB  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;     558     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;     753     745       8 AA         301 N3ALAA  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows, 6 more variables: dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   variable names ¹​dep_time, ²​sched_dep_time, ³​dep_delay, ⁴​arr_time,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ⁵​sched_arr_time, ⁶​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we just have 16 columns, as opposed to the original 19.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just a note&lt;/strong&gt;. In the text we are using, the syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But based on this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;select.R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I get the sense that &lt;code&gt;!&lt;/code&gt; is the current recommendation for taking the complement in &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; statements and that &lt;code&gt;-&lt;/code&gt; is deprecated. And FYI: documentation &lt;em&gt;always&lt;/em&gt; lags behind implementation.&lt;/p&gt;
&lt;p&gt;We can do exactly the same thing by explicitly listing the columns we want to drop, &lt;em&gt;but&lt;/em&gt;, there is a gotcha here.&lt;/p&gt;
&lt;p&gt;This (which was my first guess) does not work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead, we need to wrap the dropped columns in a &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c()&lt;/code&gt;&lt;/a&gt; vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;year&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;day&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_t…¹ sched…² dep_d…³ arr_t…⁴ sched…⁵ arr_d…⁶ carrier flight tailnum origin&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;     517     515       2     830     819      11 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;545 N14228  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;     533     529       4     850     830      20 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;714 N24211  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;     542     540       2     923     850      33 AA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;141 N619AA  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;     544     545      -&lt;span style=&#39;color: #BB0000;&#39;&gt;1&lt;/span&gt;    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004    &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022     -&lt;span style=&#39;color: #BB0000;&#39;&gt;18&lt;/span&gt; B6         725 N804JB  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;     554     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;6&lt;/span&gt;     812     837     -&lt;span style=&#39;color: #BB0000;&#39;&gt;25&lt;/span&gt; DL         461 N668DN  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;     554     558      -&lt;span style=&#39;color: #BB0000;&#39;&gt;4&lt;/span&gt;     740     728      12 UA        &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;696 N39463  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;     555     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;5&lt;/span&gt;     913     854      19 B6         507 N516JB  EWR   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;     557     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     709     723     -&lt;span style=&#39;color: #BB0000;&#39;&gt;14&lt;/span&gt; EV        &lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt;708 N829AS  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;     557     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;3&lt;/span&gt;     838     846      -&lt;span style=&#39;color: #BB0000;&#39;&gt;8&lt;/span&gt; B6          79 N593JB  JFK   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;     558     600      -&lt;span style=&#39;color: #BB0000;&#39;&gt;2&lt;/span&gt;     753     745       8 AA         301 N3ALAA  LGA   &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows, 6 more variables: dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, and abbreviated&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   variable names ¹​dep_time, ²​sched_dep_time, ³​dep_delay, ⁴​arr_time,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   ⁵​sched_arr_time, ⁶​arr_delay&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is the syntax for &lt;em&gt;combining selections&lt;/em&gt; in the current dplyr package.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check if it works on positive selections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;year&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;month&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;day&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year month   day&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  &lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;013     1     1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Yep, all the same.&lt;/p&gt;
&lt;p&gt;So it seems it&amp;rsquo;s &lt;em&gt;optional&lt;/em&gt; for positive selections, but &lt;em&gt;necessary&lt;/em&gt; for negative selections.&lt;/p&gt;
&lt;h4 id=&#34;selection-helpers&#34;&gt;Selection helpers&lt;/h4&gt;
&lt;p&gt;There are other ways to select columns efficiently without explicitly naming them.&lt;/p&gt;
&lt;p&gt;Here are some examples of helpers which select variables by pattern-matching over the names. Note that the search term must be wrapped in quotes (since we are searching on text in the column name):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyselect.r-lib.org/reference/starts_with.html&#39;&gt;ends_with&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;time&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_time sched_dep_time arr_time sched_arr_time air_time&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;      517            515      830            819      227&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;      533            529      850            830      227&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;      542            540      923            850      160&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;      544            545     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004           &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022      183&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;      554            600      812            837      116&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;      554            558      740            728      150&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;      555            600      913            854      158&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;      557            600      709            723       53&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;      557            600      838            846      140&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;      558            600      753            745      138&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyselect.r-lib.org/reference/starts_with.html&#39;&gt;starts_with&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;time&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    time_hour          &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;             &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt; 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can combine these two helpers (you can also think of them as &amp;lsquo;filters&amp;rsquo; or &amp;lsquo;constraints&amp;rsquo; to make contact with other programming languages) using logical operators. Here is an &amp;lsquo;OR&amp;rsquo; statement using the &lt;code&gt;|&lt;/code&gt; syntax. It means the selection returns &lt;em&gt;all&lt;/em&gt; selections that match &lt;em&gt;either&lt;/em&gt; columns that end with &amp;ldquo;time&amp;rdquo; or start with &amp;ldquo;time&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyselect.r-lib.org/reference/starts_with.html&#39;&gt;ends_with&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;time&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyselect.r-lib.org/reference/starts_with.html&#39;&gt;starts_with&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;time&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;             &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;      517            515      830            819      227 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;      533            529      850            830      227 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;      542            540      923            850      160 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;      544            545     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004           &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022      183 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;      554            600      812            837      116 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;      554            558      740            728      150 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;      555            600      913            854      158 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;      557            600      709            723       53 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;      557            600      838            846      140 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;      558            600      753            745      138 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this particular case there is a more compact way to get the same result, using the &lt;a href=&#34;https://tidyselect.r-lib.org/reference/starts_with.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt; helper. But this solution has lower resolution, since &amp;ldquo;time&amp;rdquo; could be anywhere in the column name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span&gt;&lt;span class=&#39;nv&#39;&gt;flights&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span&gt;  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyselect.r-lib.org/reference/starts_with.html&#39;&gt;contains&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;time&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 336,776 × 6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;          &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;             &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;      517            515      830            819      227 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;      533            529      850            830      227 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;      542            540      923            850      160 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;      544            545     &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;004           &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;022      183 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;      554            600      812            837      116 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;      554            558      740            728      150 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;05:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;      555            600      913            854      158 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;      557            600      709            723       53 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;      557            600      838            846      140 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;      558            600      753            745      138 2013-01-01 &lt;span style=&#39;color: #555555;&#39;&gt;06:00:00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 336,766 more rows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But you get the idea. The usefulness of these &amp;lsquo;selection helpers&amp;rsquo; depends on the column naming conventions you create (or most likely inherit) from a colleague or online.&lt;/p&gt;
&lt;h2 id=&#34;break-out-exercises-1&#34;&gt;Break out exercises:&lt;/h2&gt;
&lt;p&gt;See 5.4.1 in the text.&lt;/p&gt;
&lt;p&gt;But just state with these:&lt;/p&gt;
&lt;p&gt;Create a couple of select queries which pull out dep_time, dep_delay, arr_time, and arr_delay from flights, just using what we learned above.&lt;/p&gt;
&lt;p&gt;One should be explicit, and others (at least slightly!) more efficient.&lt;/p&gt;
&lt;p&gt;If you get through these with no issues, feel free to explore more of the execises in 5.4.1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Session S03E12: Incorporating your own functions into loops</title>
      <link>https://biodash.github.io/codeclub/s03e12_functions_in_loops/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s03e12_functions_in_loops/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to incorporate your own functions into loops.&lt;/li&gt;
&lt;li&gt;Learn how to efficiently &lt;em&gt;save&lt;/em&gt; the outputs of your loop into a data structure.&lt;/li&gt;
&lt;li&gt;Learn how using a functional (like &lt;code&gt;purr::map&lt;/code&gt;) saves you a lot of housekeeping.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Again we&amp;rsquo;ll be using &lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt; from the tidyverse package, so we need to load that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt; ─────────────────────────────────────── tidyverse 1.3.1 ──&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt; 3.3.5     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt; 0.3.4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt; 3.1.6     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt; 1.0.8&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt; 1.2.0     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt; 1.4.0&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt; 2.1.2     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt; 0.5.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt; masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::filter()&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;    masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::lag()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll also reuse the toy data frame from last Code Club:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tibble.tidyverse.org/reference/tibble.html&#39;&gt;tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 × 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;          a        b      c      d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.57&lt;/span&gt;    0.647    1.39   0.851&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  0.239   0.667   -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.108&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.74&lt;/span&gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.520&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.663&lt;/span&gt;   -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.343&lt;/span&gt;  0.652&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.035&lt;/span&gt;&lt;span style=&#39;color: #BB0000; text-decoration: underline;&#39;&gt;9&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.69&lt;/span&gt;    -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.30&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.58&lt;/span&gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  1.27    0.357    0.158 -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.92&lt;/span&gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.04&lt;/span&gt;    0.490    0.897  1.33 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.212&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.753&lt;/span&gt;   -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.68&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.503&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;  1.91    0.275    0.646  0.139&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.535&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.006&lt;/span&gt;&lt;span style=&#39;color: #BB0000; text-decoration: underline;&#39;&gt;32&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.02&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.467&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  0.223  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.422&lt;/span&gt;    0.616 -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.553&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And we&amp;rsquo;ll also be re-using our own &lt;code&gt;normalize&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Last time we saw how to use this function to simplify our code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In previous Code Clubs we&amp;rsquo;ve seen how you can apply a built-in function like &lt;code&gt;mean&lt;/code&gt; to each column of a data frame using a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;lapply&lt;/code&gt;, or &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use exactly the same techniques with our own functions.&lt;/p&gt;
&lt;p&gt;But I think it&amp;rsquo;s worth taking advantage of this time to revisit a couple of details (some of which were in the Bonus Material in &lt;a href=&#34;https://biodash.github.io/codeclub/s03e08_loops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S03E08&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;accessing-by-value-vsindex&#34;&gt;Accessing by value vs. index&lt;/h2&gt;
&lt;p&gt;In our first session on loops, we saw an example like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#39;c&#39;&gt;# We iterate over 10, 11, 12, 13&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -10&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -11&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -12&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we are looping over the actual values in the vector. But we can also access the values &lt;em&gt;by their index&lt;/em&gt;. Here we loop over an index, and include that index in the body of the loop. It is very common in this usage to use the name &lt;code&gt;i&lt;/code&gt; for the variable. This is most common when the vector/list/data frame already exists as an object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;c&#39;&gt;# We create a vector&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;             &lt;span class=&#39;c&#39;&gt;# We iterate over the indexes 1, 2, 3, 4&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;     &lt;span class=&#39;c&#39;&gt;# We access the value using the index notation `[ ]`&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -10&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -11&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -12&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that here we &amp;lsquo;hard-coded&amp;rsquo; the length of the vector inside the loop. We can generalize this so it will work on vectors of &lt;em&gt;any length&lt;/em&gt; by using this syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/length.html&#39;&gt;length&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/length.html&#39;&gt;length&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#39;c&#39;&gt;# We iterate over 1, 2, 3,...&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -10&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -11&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -12&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;storing-loop-outputs&#34;&gt;Storing loop outputs&lt;/h2&gt;
&lt;p&gt;We have also seen that unless you issue a &lt;a href=&#34;https://rdrr.io/r/base/print.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt; statement which runs on &lt;em&gt;every separate iteration of the loop&lt;/em&gt;, the output values simply &amp;lsquo;go away&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Similarly if we want to actually &lt;em&gt;save&lt;/em&gt; the output of the loop in a vector, we need to save an output value on &lt;em&gt;every separate iteration of the loop&lt;/em&gt;. And this means we have to build the output vector iteration-by-iteration. Here is a first guess how to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;outputs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;                    &lt;span class=&#39;c&#39;&gt;# We &#39;initialize&#39; an *empty vector* to hold the outputs&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;outputs&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; logical(0)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;outputs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;outputs&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;a_number&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;c&#39;&gt;# Each time round the loop we *append* a new value to the existing vector&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;outputs&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -10 -11 -12 -13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This looks fine, &lt;strong&gt;however&lt;/strong&gt;, there is a problem. The vector &amp;lsquo;grows&amp;rsquo; at each iteration, and this means that, as Jelmer pointed out in the bonus material on loops, &amp;lsquo;&lt;strong&gt;R has to create an entirely new object in each iteration of the loop&lt;/strong&gt;, because the object&amp;rsquo;s memory requirements keep increasing.&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This is not an issue for the toy vector we are using here, but say you were using a loop to create a data frame, column by column, with thousands of rows, and hundreds of columns. On every iteration the entire data frame would have to be copied and extended, and copied and extended, and&amp;hellip;&lt;/p&gt;
&lt;p&gt;So how do we avoid that?&lt;/p&gt;
&lt;p&gt;The technique is to initialize a vector (or list, or data frame) of the appropriate size for the outputs, which &lt;strong&gt;preallocates&lt;/strong&gt; the memory required to store it. Then instead of &lt;em&gt;appending&lt;/em&gt; to it on each iteration, we &lt;em&gt;write into it&lt;/em&gt; on each iteration. The size of the output vector is already fixed, and modifying values like this is way more efficient. Again, the magic is is to use indexes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;output_vector&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;length &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;output_vector&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] FALSE FALSE FALSE FALSE&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;11&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt; 
  &lt;span class=&#39;nv&#39;&gt;output_vector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;numbers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;output_vector&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -10 -11 -12 -13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;breakout-rooms-storing-loop-outputs&#34;&gt;Breakout rooms, storing loop outputs&lt;/h2&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;R has a function &lt;code&gt;letters&lt;/code&gt; which returns a character vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;letters&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34; &#34;e&#34; &#34;f&#34; &#34;g&#34; &#34;h&#34; &#34;i&#34; &#34;j&#34; &#34;k&#34; &#34;l&#34; &#34;m&#34; &#34;n&#34; &#34;o&#34; &#34;p&#34; &#34;q&#34; &#34;r&#34; &#34;s&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [20] &#34;t&#34; &#34;u&#34; &#34;v&#34; &#34;w&#34; &#34;x&#34; &#34;y&#34; &#34;z&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;letters&lt;/code&gt; is a bit like &lt;code&gt;iris&lt;/code&gt;: it&amp;rsquo;s a character vector which is &amp;lsquo;just there&amp;rsquo;, like &lt;code&gt;iris&lt;/code&gt; is a data frame which is &amp;lsquo;just there&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;The tidyverse also has a function &lt;a href=&#34;https://stringr.tidyverse.org/reference/case.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str_to_upper()&lt;/code&gt;&lt;/a&gt; which converts the case of a character:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://stringr.tidyverse.org/reference/case.html&#39;&gt;str_to_upper&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;A&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Write a for loop that converts each element of a character vector to upper case, saving the output by writing the output of each iteration into an empty vector.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;What is `letters[1]`? &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;upper_case&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;length &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;26&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;26&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;upper_case&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://stringr.tidyverse.org/reference/case.html&#39;&gt;str_to_upper&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;letters&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h2 id=&#34;back-to-normalize&#34;&gt;Back to &lt;code&gt;normalize&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This gives us the machinery to use our own function in a for loop.&lt;/p&gt;
&lt;p&gt;First, recall how we can access a column vector using the &lt;code&gt;[[ ]]&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] -1.56695706  0.23880352 -0.52028396 -0.03587572  1.26976225 -1.03948139&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] -0.21172370  1.90549573 -0.53548764  0.22250909&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So we can iteratively access each column in a for loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.0000000 0.5200245 0.3014218 0.4409221 0.8169209 0.1519029 0.3902813&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 1.0000000 0.2970435 0.5153320&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.9915841 1.0000000 0.4352500 0.0000000 0.8684414 0.9250426 0.3970564&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.8335988 0.7141351 0.5377301&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 1.0000000 0.5131949 0.4367290 0.1242323 0.5998479 0.8402709 0.0000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.7587425 0.2170914 0.7489915&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.85264136 0.05580354 0.79127366 0.10586772 0.00000000 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.43627787 0.63372198 0.44736338 0.42096304&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And again, we can generalize this to a data frame of of any length.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/length.html&#39;&gt;length&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.0000000 0.5200245 0.3014218 0.4409221 0.8169209 0.1519029 0.3902813&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 1.0000000 0.2970435 0.5153320&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.9915841 1.0000000 0.4352500 0.0000000 0.8684414 0.9250426 0.3970564&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.8335988 0.7141351 0.5377301&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 1.0000000 0.5131949 0.4367290 0.1242323 0.5998479 0.8402709 0.0000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.7587425 0.2170914 0.7489915&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.85264136 0.05580354 0.79127366 0.10586772 0.00000000 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.43627787 0.63372198 0.44736338 0.42096304&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here again, we are just printing the output, not saving it to a new data frame.&lt;/p&gt;
&lt;p&gt;So, according to our strategy, we want to create an empty data frame to hold our results. We can use information from our original data frame to do this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;length &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;nrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;c&#39;&gt;# Empty vector with correct number of rows&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tibble.tidyverse.org/reference/tibble.html&#39;&gt;tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;, b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;, c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;, d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/length.html&#39;&gt;length&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;df_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df_norm&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 × 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        a     b     c      d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; 0     0.992 1     0.853 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt; 0.520 1     0.513 0.055&lt;span style=&#39;text-decoration: underline;&#39;&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; 0.301 0.435 0.437 0.791 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; 0.441 0     0.124 0.106 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt; 0.817 0.868 0.600 0     &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt; 0.152 0.925 0.840 1     &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt; 0.390 0.397 0     0.436 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt; 1     0.834 0.759 0.634 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; 0.297 0.714 0.217 0.447 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt; 0.515 0.538 0.749 0.421&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;using-a-map-command&#34;&gt;Using a &lt;code&gt;map&lt;/code&gt; command.&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a pain to have to &lt;em&gt;manually&lt;/em&gt; set up the &amp;lsquo;container&amp;rsquo; that will house your results. Couldn&amp;rsquo;t the computer do that for us? Yes! All of this housekeeping, the for loop, the preallocation of data frame size, is done behind the scenes as part of the implementation of &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://purrr.tidyverse.org/reference/map.html&#39;&gt;map&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ a: num [1:10] 0 0.52 0.301 0.441 0.817 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ b: num [1:10] 0.992 1 0.435 0 0.868 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ c: num [1:10] 1 0.513 0.437 0.124 0.6 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ d: num [1:10] 0.8526 0.0558 0.7913 0.1059 0 ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the output of &lt;code&gt;map&lt;/code&gt; (like &lt;code&gt;lapply&lt;/code&gt;) is a list. But we can easily convert it into a data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://purrr.tidyverse.org/reference/map.html&#39;&gt;map&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; 
  &lt;span class=&#39;nv&#39;&gt;as_tibble&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; tibble [10 × 4] (S3: tbl_df/tbl/data.frame)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ a: num [1:10] 0 0.52 0.301 0.441 0.817 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ b: num [1:10] 0.992 1 0.435 0 0.868 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ c: num [1:10] 1 0.513 0.437 0.124 0.6 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ d: num [1:10] 0.8526 0.0558 0.7913 0.1059 0 ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Session S03E11: Writing your own Functions</title>
      <link>https://biodash.github.io/codeclub/s03e11_functions/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s03e11_functions/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a function in R.&lt;/li&gt;
&lt;li&gt;Learn another way to avoid repetition in your code by creating your own functions.&lt;/li&gt;
&lt;li&gt;Learn all the advantages of using functions instead of copied code blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We&amp;rsquo;ll be using &lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt; from the tidyverse package, so we need to load that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt; ─────────────────────────────────────── tidyverse 1.3.1 ──&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt; 3.3.5     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt; 0.3.4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt; 3.1.6     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt; 1.0.8&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt; 1.2.0     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt; 1.4.0&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt; 2.1.2     &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt; 0.5.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt; masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::filter()&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt; &lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;::&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;    masks &lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;::lag()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-is-an-r-function&#34;&gt;What is an R function?&lt;/h2&gt;
&lt;p&gt;A good way to understand this is to translate knowledge you already have from math directly into R. &amp;lsquo;Once upon a time&amp;rsquo; you probably met something like this:&lt;/p&gt;
&lt;p&gt;$$y = 2x +3$$&lt;/p&gt;
&lt;p&gt;which relates an &lt;code&gt;expression&lt;/code&gt; involving $x$ (on the right hand side) to an equivalent value $y$.&lt;/p&gt;
&lt;p&gt;In mathematics, a function is just a &amp;lsquo;rule&amp;rsquo; that relates &lt;code&gt;inputs&lt;/code&gt; to &lt;code&gt;outputs&lt;/code&gt; (with certain constraints).&lt;/p&gt;
&lt;p&gt;Later you may have come across this formulation:&lt;/p&gt;
&lt;p&gt;$$f(x) = 2x +3$$&lt;/p&gt;
&lt;p&gt;Now the function has a name &lt;code&gt;f()&lt;/code&gt; (not a particularly good one, however).&lt;/p&gt;
&lt;p&gt;You probably recall that $x$ is called the &lt;code&gt;argument&lt;/code&gt; of the function. So how do we translate this into R?&lt;/p&gt;
&lt;p&gt;The crucial thing here is the R &lt;code&gt;function()&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;f&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;  &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We &lt;strong&gt;define&lt;/strong&gt; the function using this &lt;code&gt;function()&lt;/code&gt; operator, and also &lt;strong&gt;assign&lt;/strong&gt; the function to a name (here &lt;code&gt;f&lt;/code&gt;) using &amp;lt;-, just like assigning any other value to an object. This means that now &lt;code&gt;f&lt;/code&gt; is a function object: just like you create vector objects, or lists, or data frame objects, when you assign them to names. Notice too that in RStudio they appear in the Global Environment in a special &amp;lsquo;Functions&amp;rsquo; section, and clicking on them shows the code of the function. This means that if you have a large file with many functions defined, you don&amp;rsquo;t have to go back searching for the function definition in the code itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt; (gotta have it!)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; here is also called the &lt;strong&gt;argument&lt;/strong&gt; to the function. In this case there is just one, there could be more.&lt;/p&gt;
&lt;p&gt;The expression inside the curly braces: $(2 * x) + 3$, is called the &lt;strong&gt;body&lt;/strong&gt; of the function.&lt;/p&gt;
&lt;p&gt;Here is the basic template of any function in R:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arguments go inside (&amp;hellip;). The body is the block of code you want to reuse, and it&amp;rsquo;s contained in curly brackets {&amp;hellip;}.&lt;/p&gt;
&lt;p&gt;Giving good names to functions can be tricky. You to don&amp;rsquo;t want to be too explicit, and you don&amp;rsquo;t want to be too terse (&lt;code&gt;f()&lt;/code&gt; is too terse, btw). We&amp;rsquo;ll return to this below when we write fancier functions.&lt;/p&gt;
&lt;p&gt;But now we want to actually use the function to compute an output: this is termed &lt;strong&gt;calling&lt;/strong&gt; the function, by &lt;strong&gt;passing in&lt;/strong&gt; a specific value. That specific value gets &lt;strong&gt;assigned&lt;/strong&gt; to the argument inside the function.&lt;/p&gt;
&lt;p&gt;Here is a trivial example, assigning the value $1$ to the argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So &lt;em&gt;after&lt;/em&gt; calling the function in this way &lt;code&gt;x&lt;/code&gt; is instantiated to &lt;code&gt;1&lt;/code&gt;, and what is really happening is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Easy-peasy.&lt;/p&gt;
&lt;p&gt;But wait! if you simply call a function, its &lt;strong&gt;output&lt;/strong&gt; (which you are probably interested in) just goes away. If you want to save the output of the function, to be used later, you need to &lt;em&gt;assign the output to a variable&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;my_output&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;my_output&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This variable will now appear in the Values section of your Environment pane in RStudio, and can be reused in your subsequent code.&lt;/p&gt;
&lt;p&gt;But wait! remember R data-structures? What if we pass in a vector as the argument?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  5  7  9 11 13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Woohoo! In R, the functions you write yourself are also automagically &amp;lsquo;vectorized&amp;rsquo;: vector in, vector out.&lt;/p&gt;
&lt;p&gt;But wait! how about a list???&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Error in 2 * x: non-numeric argument to binary operator&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Whoops! Looks like R is vectorized over vectors :). If we want to process our new function over a list we&amp;rsquo;ll have to do something more fancy, like a for-loop. We&amp;rsquo;ll see how to incorporate our own functions into for-loops, building on previous sessions, next week.&lt;/p&gt;
&lt;h2 id=&#34;breakout-rooms-write-your-own-functions&#34;&gt;Breakout rooms, write your own functions&lt;/h2&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Write a function from scratch that computes the square of a single input. Give it a sensible name, and run it on some test input numbers to make sure it works.&lt;/p&gt;
&lt;p&gt;Make sure to look in the Functions pane of the RStudio Environment tab to check it is assigned correctly.&lt;/p&gt;
&lt;p&gt;Is your function vectorized? Run it on a simple vector argument to check.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;The relevant R exponentiation operator is `**`. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;**&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;square&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;square&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  1  4  9 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;The function in Exercise 1 has a single argument, the base, and raises it to the exponent 2.&lt;/p&gt;
&lt;p&gt;Write a function with two arguments, which includes both a base and exponent and try it out.&lt;/p&gt;
&lt;p&gt;Is your function vectorized? Run it on a simple base vector to check.&lt;/p&gt;
&lt;p&gt;Bonus: is it vectorized on both the base and the exponent?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;exponential&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;e&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;**&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;e&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;exponential&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1024&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;exponential&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]       1    1024   59049 1048576&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;exponential&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]   1   4  27 256&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;exponential&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  1  4  3 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;R does not have a built-in function for calculating the &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Coefficient_of_variation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coefficient of variation&lt;/a&gt;, aka the &lt;strong&gt;RSD&lt;/strong&gt; (relative standard deviation). This is defined as &lt;em&gt;the ratio of the standard deviation to the mean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Create a function that computes this, and test it on a couple of vectors.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;The relevant R built-in functions are &lt;code&gt;sd()&lt;/code&gt; and &lt;code&gt;mean()&lt;/code&gt;. The function should have one argument, which is assumed to be a vector. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;coefficient_of_variation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/sd.html&#39;&gt;sd&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;coefficient_of_variation&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.5504819&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;coefficient_of_variation&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;15&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;175&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.4907454&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-write-functions-spoiler-alert-dry&#34;&gt;Why write functions? (Spoiler alert, DRY&amp;hellip;)&lt;/h2&gt;
&lt;h3 id=&#34;copying-your-code-is-not-good&#34;&gt;Copying your code is &lt;em&gt;not good&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The first motivation for writing a function is when you find yourself cut-and-pasting code blocks with slight alterations each time.&lt;/p&gt;
&lt;p&gt;Say we have the following toy tidyverse data frame, where each column is a vector of 10 random numbers from a normal distribution, with &lt;code&gt;mean = 0&lt;/code&gt; and &lt;code&gt;sd = 1&lt;/code&gt; (the defaults for &lt;code&gt;rnorm&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tibble.tidyverse.org/reference/tibble.html&#39;&gt;tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 × 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;          a       b       c      d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.88&lt;/span&gt;    0.727  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.468&lt;/span&gt;   1.27 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;  0.039&lt;span style=&#39;text-decoration: underline;&#39;&gt;9&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.789&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;2.41&lt;/span&gt;    0.376&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.410&lt;/span&gt;   1.86    1.05   -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.618&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.266&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.204&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.715&lt;/span&gt;   0.279&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;  0.244  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.067&lt;/span&gt;&lt;span style=&#39;color: #BB0000; text-decoration: underline;&#39;&gt;3&lt;/span&gt;  0.884  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.340&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;  0.064&lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.09&lt;/span&gt;    0.152  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.840&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;  0.749  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.494&lt;/span&gt;   0.681   0.341&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.35&lt;/span&gt;    0.208   0.077&lt;span style=&#39;text-decoration: underline;&#39;&gt;6&lt;/span&gt;  2.15 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;1.17&lt;/span&gt;    0.088&lt;span style=&#39;text-decoration: underline;&#39;&gt;3&lt;/span&gt; -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.829&lt;/span&gt;  -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.174&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;  0.733   1.05    0.808   0.190&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In previous Code Clubs we&amp;rsquo;ve seen how you can apply a built-in function like &lt;code&gt;mean&lt;/code&gt; to each column using a &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;lapply&lt;/code&gt;. But say we wanted to do something a bit fancier that is not part of core R. For example, we can &lt;em&gt;normalize&lt;/em&gt; the values in a column so they range from 0 to 1 using the following code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.0000000 0.7297073 0.5582684 0.6132731 0.8073051 0.7390605 1.0000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.1988908 0.2699569 0.9939179&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code is a literal translation of the mathematical formula for normalization:&lt;/p&gt;
&lt;p&gt;$$z_{i} = \frac{x_{i} - min(x)}{max(x)-min(x)}$$&lt;/p&gt;
&lt;p&gt;OK, so how can we do this for each column? Here is a first attempt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 × 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        a       b     c      d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt; 0      0.246  0.562 0.706 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt; 0.730 -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.267&lt;/span&gt;  0     0.407 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt; 0.558  0.630  1     0.074&lt;span style=&#39;text-decoration: underline;&#39;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt; 0.613 -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.069&lt;/span&gt;&lt;span style=&#39;color: #BB0000; text-decoration: underline;&#39;&gt;1&lt;/span&gt; 0.490 0.375 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt; 0.807 -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.022&lt;/span&gt;&lt;span style=&#39;color: #BB0000; text-decoration: underline;&#39;&gt;8&lt;/span&gt; 0.952 0.168 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt; 0.739 -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.370&lt;/span&gt;  0.741 0     &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt; 1     -&lt;span style=&#39;color: #BB0000;&#39;&gt;0.167&lt;/span&gt;  0.894 0.396 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt; 0.199  0.070&lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt; 0.719 1     &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt; 0.270  0.029&lt;span style=&#39;text-decoration: underline;&#39;&gt;9&lt;/span&gt; 0.458 0.223 &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt; 0.994  0.356  0.930 0.345&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This works, but it caused me mental anguish to type it out. Even with cut and paste! All those manual textual substitutions!! And manual data entry is prone to mistakes, especially repetitive tasks like this. And say you had 1,000 columns&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And it didn&amp;rsquo;t work!!&lt;/strong&gt; Honestly, I swear that mistake was totally real: I didn&amp;rsquo;t notice it until I looked at the output. Can you spot the mistake?&lt;/p&gt;
&lt;p&gt;It turns out R has a &lt;code&gt;range&lt;/code&gt; function that returns the minimum and maximum of a vector, which somewhat simplifies the coding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The result is a vector like &lt;code&gt;c(-1.2129504, 2.1011248)&lt;/code&gt; (it varies run to run, since the columns values are random) which we can then index, and so we only do the min/max computation once for each column, instead of three times, so we get the following block of code for each column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Does this help?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Still pretty horrible, and arguably worse since we add a line for each column.&lt;/p&gt;
&lt;p&gt;How can we distill this into a function to avoid all that repetition?&lt;/p&gt;
&lt;h3 id=&#34;encapsulation-of-code-in-a-function&#34;&gt;Encapsulation of code in a function&lt;/h3&gt;
&lt;p&gt;The secret to function writing is abstracting the &lt;em&gt;constant&lt;/em&gt; from the &lt;em&gt;variable&lt;/em&gt;. (Using the &lt;code&gt;range&lt;/code&gt; function does throw into sharper relief what is constant and what is varying at least.) The constant part is the &lt;strong&gt;body&lt;/strong&gt; of the function: the template or boiler-plate you use over and over again. The variable parts are the &lt;strong&gt;arguments&lt;/strong&gt; of the function.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like in this case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Pretty cool, right? Here &lt;code&gt;normalize&lt;/code&gt; is the descriptive name we give the function.&lt;/p&gt;
&lt;p&gt;In the current case the argument of our function is a column vector pulled from the data frame. But we can potentially use this function on &lt;em&gt;any&lt;/em&gt; vector, so let&amp;rsquo;s not be too specific. The more generally you can write your function, the more useful it will be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8.657&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;80&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.000000000 0.051948052 0.001838866 0.073467532 1.000000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A couple of things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Including that extra line &lt;code&gt;rng &amp;lt;- range(x)&lt;/code&gt; is no longer a problem, since we just type it once. If you are typing things out over and over you might prefer brevity. &lt;em&gt;When you write a function, you should prefer clarity.&lt;/em&gt; It&amp;rsquo;s good practice to break the the function down into logical steps, and name them properly. It&amp;rsquo;s much easier for others to &amp;lsquo;read&amp;rsquo; your function, and much easier for you when you come back to it in a couple of years. This is the principle of making your code &amp;lsquo;self-annotated&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions should be simple, clear, and do &lt;em&gt;one thing well&lt;/em&gt;. You create programs by combining simple functions in a modular manner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our original horrible code can now be rewritten as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Which is an improvement, but the real power comes from the fact that we can use our new function in &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;apply&lt;/code&gt; statements. We&amp;rsquo;ll see how to do that next week.&lt;/p&gt;
&lt;p&gt;By writing our own functions, we&amp;rsquo;ve effectively extended what R can do. And this is all that packages are: libraries of new functions that extend the capabilities of base R. In fact, if there are functions you design for your particular subject area and find yourself using all the time, you can make your own package and load it, and all your favorite functions will be right there (but that&amp;rsquo;s for another day&amp;hellip;)&lt;/p&gt;
&lt;h3 id=&#34;exercise-4-functions-are-not-just-for-arithmetic&#34;&gt;Exercise 4: Functions are not just for arithmetic!&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.m.wikipedia.org/wiki/FASTQ_format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastq&lt;/a&gt; file format for DNA sequencing uses a letter/punctuation code for the &lt;em&gt;quality of the base&lt;/em&gt; called at each position (the fourth line below) which is in one-to-one relationship to the bases in the second line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SIM:1:FCX:1:15:6329:1045 1:N:0:2
TCGCACTCAACGCCCTGCATATGACAAGACAGAATC
+
&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To translate a letter code into a numerical &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Phred_quality_score&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phred quality score&lt;/a&gt; we have to do two things: (i) translate the &lt;strong&gt;character&lt;/strong&gt; to an &lt;strong&gt;integer&lt;/strong&gt; using the &lt;a href=&#34;http://www.asciitable.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASCII code&lt;/a&gt; look up table (ii) subtract 33 from that value (!). (High scores are good).&lt;/p&gt;
&lt;p&gt;For the first step, R has a built-in function that converts a character into an integer according to that table, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;!&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 33&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Write a function &lt;code&gt;phred_score()&lt;/code&gt; that computes the phred score for any character. Check that it returns 0 for &amp;ldquo;!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Is this function vectorized? Apply your function to our example string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to convert it to a vector of phred quality scores.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;p&gt;&lt;br&gt;Remember when you pass the value to this function it has to be an &lt;em&gt;R character string&lt;/em&gt;, which needs to be surrounded by quotes.&lt;/p&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;phred_score&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;phred_score&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;!&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;phred_score&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 27 29 26  2  2 28 29 27 24 28 32 32 32 32 32 32 32 32 32 32 24  2 25 27  2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [26] 27 26 27 27 27 30 30 30 30  2 28&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note: &amp;ldquo;!&amp;rdquo; is the first &lt;strong&gt;printing character&lt;/strong&gt; in the ASCII table. The characters 0 through 32 were used historically to control the behavior of teleprinters: &amp;ldquo;the original ASCII specification included 33 non-printing control codes which originated with Teletype machines; most of these are now obsolete&amp;rdquo;. If the ASCII table started with &amp;ldquo;!&amp;rdquo; instead of &lt;code&gt;NUL&lt;/code&gt; we wouldn&amp;rsquo;t need the correction of subtracting 33, and &amp;ldquo;!&amp;rdquo; would translate to 0. &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>S03E06: Data structures and subsetting</title>
      <link>https://biodash.github.io/codeclub/s03e06_datastructures/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s03e06_datastructures/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the uses of base-R&amp;rsquo;s three subsetting operators: &lt;code&gt;[ ]&lt;/code&gt;, &lt;code&gt;[[ ]]&lt;/code&gt;, and &lt;code&gt;$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Learn how the behavior of these operators varies depending on the &lt;strong&gt;data structure&lt;/strong&gt; you are subsetting (vector, list, or data frame).&lt;/li&gt;
&lt;li&gt;Learn the value of the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;Learn how these base-R operators relate to tidyverse commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In our previous set of Code Clubs on stats packages, we&amp;rsquo;ve encountered data structures of various kinds. Here we put the data structure material all in one place, and put it in a wider R context. We&amp;rsquo;ll move below and beyond the tidyverse to get an overview of accessing various kinds of data structure in R.&lt;/p&gt;
&lt;h2 id=&#34;intro-what-is-subsetting-anyway&#34;&gt;Intro: What is &amp;lsquo;subsetting&amp;rsquo; anyway?&lt;/h2&gt;
&lt;p&gt;Subsetting (also known as indexing) is simply a way of using base-R syntax to extract specific pieces of a data structure.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve already seen two &lt;strong&gt;dplyr&lt;/strong&gt; verbs that perform this kind of operation: &lt;code&gt;filter&lt;/code&gt; (to extract specific rows) and &lt;code&gt;select&lt;/code&gt; (to extract specific columns).&lt;/p&gt;
&lt;p&gt;But these are tidyverse commands, and only work with data frames.&lt;/p&gt;
&lt;p&gt;R has two more basic data structures, from which everything else is built, &lt;strong&gt;vectors&lt;/strong&gt; and &lt;strong&gt;lists&lt;/strong&gt;, and for these we need different subsetting operators (dplyr functions won&amp;rsquo;t work). We&amp;rsquo;ll also see that data frames are just a special kind of list, and that base-R subsetting operators also work for these, which can often be useful and efficient.&lt;/p&gt;
&lt;p&gt;In your R experience you will almost certainly come across both code and output which does not adhere to tidyverse conventions. We have already come across outputs which are &lt;em&gt;not&lt;/em&gt; data frames in &lt;a href=&#34;https://biodash.github.io/codeclub/s03e01_ttests/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO3E01: t-tests&lt;/a&gt; and &lt;a href=&#34;https://biodash.github.io/codeclub/s03e02_anova/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S03E02: ANOVA&lt;/a&gt; which we will revisit below.&lt;/p&gt;
&lt;p&gt;Since the behavior of these operators depends on the actual data structure you are working with, it&amp;rsquo;s useful when experimenting to use them in conjunction with the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; function, which compactly displays the internal structure of an any R object. A knowledge of the make-up of these data structures is also important when you come to write your own loops, iterations, and functions.&lt;/p&gt;
&lt;p&gt;The most important distinction between vectors and lists is within vectors &lt;em&gt;every value must be of the same type&lt;/em&gt;: for example, all characters, or all integers, etc. Inside lists, you can &lt;em&gt;mix values of any type&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In addition, a list is best thought of as a general purpose container, which can contain not just mixed values, but also &lt;em&gt;entire vectors&lt;/em&gt; of any type.&lt;/p&gt;
&lt;p&gt;Since we&amp;rsquo;ll be comparing base-R with tidyverse functions, we need to load the tidyverse, and we&amp;rsquo;ll also be using the &lt;code&gt;palmerpenguins&lt;/code&gt; package to reproduce our previous ANOVA results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://allisonhorst.github.io/palmerpenguins/&#39;&gt;palmerpenguins&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;
&lt;p&gt;A vector is absolutely the most basic data structure in R. Every value in a vector must be of the &lt;strong&gt;same type&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are four basic &lt;strong&gt;types&lt;/strong&gt; of vector: integer, double, character, and logical. Vectors are created by hand with the &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c()&lt;/code&gt;&lt;/a&gt; (combine, concatenate) function. We can check the type with the &lt;a href=&#34;https://rdrr.io/r/base/typeof.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;typeof()&lt;/code&gt;&lt;/a&gt; operator. This is totally redundant if you just created the vector yourself, but when you are debugging code, or creating a vector using an expression, you might want to check exactly what type of vector is being used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3 4 5&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_seq&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;vec_seq&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3 4 5&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_seq&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3 4 5&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;e&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34; &#34;e&#34;&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;character&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Vectors have an insanely simple &lt;strong&gt;str&lt;/strong&gt;ucture:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:5] 1 2 3 4 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; also displays the type, and RStudio displays the result of &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; in the Values pane. (Note that &amp;lsquo;double&amp;rsquo; and &amp;lsquo;num(eric)&amp;rsquo; mean exactly the same thing in R.)&lt;/p&gt;
&lt;p&gt;For such a simple structure, there are a surprisingly large number of ways to subset a vector. We&amp;rsquo;ll just look a a small sample here, and use the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:4] 2.1 4.2 3.3 5.4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Notice for this example we are using a pedagocial trick, where the &lt;em&gt;number after the decimal point&lt;/em&gt; indicates the position (index) of the value before the decimal point).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Positive integers&lt;/strong&gt; return elements at the specified positions. Any expression that evaluates to a vector of positions can be used as the index. The index operator is &lt;code&gt;[ ]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3 2.1&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 3.3 5.4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Negative integers&lt;/strong&gt; &lt;em&gt;exclude&lt;/em&gt; elements at the specified positions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 5.4&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The bottom line here is that each value in a vector has an implicit index (position), and we can use that index to pull out values of interest. This can be extremely useful when writing for-loops that move through a vector accessing one value at a time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;. One of the unusual features of R as opposed to other programming languages is that you can assign metadata of various kinds to the elements of vectors (and lists). For example, we can assign a &lt;strong&gt;name&lt;/strong&gt; to each element, and then use a &lt;strong&gt;character vector&lt;/strong&gt; as the index expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  Named num [1:4] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;names&#34;)= chr [1:4] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   d   c   a &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5.4 3.3 2.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; command now shows us that we now have a &amp;lsquo;Named&amp;rsquo; numeric vector, and that we have a &amp;ldquo;names&amp;rdquo; attribute, which is itself a character vector.&lt;/p&gt;
&lt;h3 id=&#34;exercise-1a&#34;&gt;Exercise 1a&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Consider the words &amp;ldquo;yellow&amp;rdquo;, &amp;ldquo;red&amp;rdquo;, and &amp;ldquo;green&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Create a numeric vector called &amp;ldquo;lengths&amp;rdquo; which simply shows the &lt;em&gt;length of the words&lt;/em&gt; (in that order).&lt;/p&gt;
&lt;p&gt;Look at its structure using &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract the first and last elements of this vector, indexing by position.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lengths&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lengths&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 6 3 5&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;lengths&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 6 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exercise-1b&#34;&gt;Exercise 1b&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Now create a second vector called &amp;ldquo;named_lengths&amp;rdquo;, with the same word-lengths, but now also using a corresponding names attribute: &amp;ldquo;yellow&amp;rdquo;, &amp;ldquo;red&amp;rdquo; and &amp;ldquo;green&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Look at its structure using &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, extract the first and last elements, but now using a character vector as the index.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;named_lengths&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;yellow&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;red&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;green&#34;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;named_lengths&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  Named num [1:3] 6 3 5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;names&#34;)= chr [1:3] &#34;yellow&#34; &#34;red&#34; &#34;green&#34;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;named_lengths&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;yellow&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;green&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; yellow  green &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;      6      5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;There are two main differences between vectors and lists: (i) lists can contain elements of &lt;strong&gt;different types&lt;/strong&gt;; and (ii) lists can contain &lt;strong&gt;entire vectors&lt;/strong&gt; as elements (and even other lists: which is why lists are sometimes referred to as &lt;strong&gt;recursive&lt;/strong&gt;: it can be lists of lists of lists, &amp;lsquo;all the way down&amp;rsquo;. This is a topic for another day!).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s directly compare the structure of a &lt;em&gt;list&lt;/em&gt; of numbers to a &lt;em&gt;vector&lt;/em&gt; of numbers. Just as we create vectors by hand with the &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c()&lt;/code&gt;&lt;/a&gt; function, we create lists with the &lt;a href=&#34;https://rdrr.io/r/base/list.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5.4&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 5.4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the difference between &lt;em&gt;printing&lt;/em&gt; a list (all those brackets!!) and using the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; command, which is much more compact and readable.&lt;/p&gt;
&lt;p&gt;What if we mix values of different types?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l_mixed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2L&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;T&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l_mixed&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l_mixed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : logi TRUE&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Things get more interesting when we create a &lt;strong&gt;list of vectors&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;kim&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;sandy&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;lee&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;23&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;21&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;26&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;mixed_vectors&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;kim&#34;   &#34;sandy&#34; &#34;lee&#34;  &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 23 21 26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr [1:3] &#34;kim&#34; &#34;sandy&#34; &#34;lee&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In these examples we see the appearance of a new subsetting operator &lt;code&gt;[[ ]]&lt;/code&gt;, in addition to &lt;code&gt;[ ]&lt;/code&gt;. How do they differ? Let&amp;rsquo;s experiment, focussing on the second element of the list &lt;code&gt;c(23, 21, 26)&lt;/code&gt;. Let&amp;rsquo;s try to pull out that vector using the &lt;code&gt;[2]&lt;/code&gt; notation (it is the second element after all).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;mixed_vectors&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_a&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 23 21 26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This does not pull out the vector!!&lt;/strong&gt; Instead, it returns a &lt;strong&gt;sublist&lt;/strong&gt; which &lt;em&gt;contains&lt;/em&gt; that vector as the only element (we&amp;rsquo;ll see why R does this below&amp;hellip;).&lt;/p&gt;
&lt;p&gt;So how to we get our hands on the actual vector? This is where the &lt;code&gt;[[ ]]&lt;/code&gt; operator comes in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;mixed_vectors&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_b&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 23 21 26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mixed_vectors_subset_b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We see that the behavior of the &lt;code&gt;[ ]&lt;/code&gt; operator is very different for lists: it selects the element(s) you request, but &lt;em&gt;always still wrapped inside a list&lt;/em&gt;. It &amp;lsquo;shrinks&amp;rsquo; the original list. The &lt;code&gt;[[ ]]&lt;/code&gt; operator on the other hand &amp;lsquo;drills-down&amp;rsquo; and just returns the &amp;lsquo;un-listed&amp;rsquo; vector in that position.&lt;/p&gt;
&lt;h2 id=&#34;data-frames&#34;&gt;Data frames&lt;/h2&gt;
&lt;p&gt;The reason R does things this way is because data frames are so central to the language. Let&amp;rsquo;s build a data frame from the ground up to see how it works.&lt;/p&gt;
&lt;p&gt;Basically the &amp;ldquo;inside&amp;rdquo; of a data frame is just a list with name attributes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;attr_list&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;name &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;kim&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;sandy&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;lee&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, age &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;23&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;21&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;26&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;attr_list&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $name&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;kim&#34;   &#34;sandy&#34; &#34;lee&#34;  &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $age&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 23 21 26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;attr_list&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ name: chr [1:3] &#34;kim&#34; &#34;sandy&#34; &#34;lee&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age : num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that instead of &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; displaying &lt;code&gt;$ : ...&lt;/code&gt; for each entry, we now see attributes &lt;code&gt;$ name: ...&lt;/code&gt; , &lt;code&gt;$ age: ...&lt;/code&gt; for each entry. Also note that all those double &lt;code&gt;[[ ]]&lt;/code&gt; notations have disappeared when we print. This should give you a clue that &lt;code&gt;$age&lt;/code&gt;, for example, is a kind of alias for &lt;code&gt;[[2]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we can &amp;lsquo;wrap&amp;rsquo; this into an official data frame structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/as.data.frame.html&#39;&gt;as.data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;attr_list&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    name age&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1   kim  23&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2 sandy  21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3   lee  26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  2 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ name: chr  &#34;kim&#34; &#34;sandy&#34; &#34;lee&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age : num  23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Or wrap it into a tidyverse tibble:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;my_tibble&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tibble.tidyverse.org/reference/as_tibble.html&#39;&gt;as_tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;attr_list&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;my_tibble&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 3 × 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   name    age&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt; kim      23&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt; sandy    21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;3&lt;/span&gt; lee      26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;my_tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; tibble [3 × 2] (S3: tbl_df/tbl/data.frame)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ name: chr [1:3] &#34;kim&#34; &#34;sandy&#34; &#34;lee&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age : num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So a data frame is basically a list (intepreted as columns), with a names attribute for the columns (interpreted as headers). And with the extra condition that all the columns are of the same length, so it&amp;rsquo;s rectangular. So we should be able to use our standard list subsetting operators on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age: num  23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since a data frame is a list, subsetting using &lt;code&gt;[ ]&lt;/code&gt; returns the specified column &lt;em&gt;still inside a data frame&lt;/em&gt;. What about &lt;code&gt;[[ ]]&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;[[ ]]&lt;/code&gt; pulls out the data vector from the column.&lt;/p&gt;
&lt;p&gt;Just like vectors, we can also subset a data frame by the name attribute, instead of by position:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_2_by_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_2_by_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age: num  23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_2_by_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_2_by_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally &lt;code&gt;my_df$age&lt;/code&gt; is simply a shorthand for &lt;code&gt;my_df[[&amp;quot;age&amp;quot;]]&lt;/code&gt; without the &lt;code&gt;[[ ]]&lt;/code&gt; and the &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_2_by_dollar_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;age&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_2_by_dollar_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;direct-comparison-with-tidyverse-functions&#34;&gt;Direct comparison with tidyverse functions&lt;/h2&gt;
&lt;p&gt;The dplyr command &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; over a data frame is exactly analogous to the single bracket operator &lt;code&gt;my_df[&amp;quot;age&amp;quot;]&lt;/code&gt;. It returns a data frame with a single column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_2_select&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/select.html&#39;&gt;select&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;col_2_select&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   age&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1  23&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2  21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3  26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_2_select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ age: num  23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The dplyr command &lt;a href=&#34;https://dplyr.tidyverse.org/reference/pull.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pull()&lt;/code&gt;&lt;/a&gt; over a data frame is exactly analogous to the double bracket operator &lt;code&gt;my_df[[&amp;quot;age&amp;quot;]]&lt;/code&gt;. It returns the data vector inside that column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_2_pull&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://dplyr.tidyverse.org/reference/pull.html&#39;&gt;pull&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;col_2_pull&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 23 21 26&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_2_pull&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:3] 23 21 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &amp;lsquo;problem&amp;rsquo; with these dplyr functions is that they &lt;em&gt;require&lt;/em&gt; a data frame as input, and we recently saw in &lt;a href=&#34;https://biodash.github.io/codeclub/s03e01_ttests/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S03E01: t-tests&lt;/a&gt; that the statistical t-test output was &lt;em&gt;not&lt;/em&gt; a data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;pop1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;n &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;20&lt;/span&gt;, mean &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, sd &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;pop2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;n &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;20&lt;/span&gt;, mean &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;, sd &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/t.test.html&#39;&gt;t.test&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;pop1&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;pop2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 10&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ statistic  : Named num 0.32&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr &#34;t&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ parameter  : Named num 37.9&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr &#34;df&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ p.value    : num 0.751&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ conf.int   : num [1:2] -1.77 2.44&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;conf.level&#34;)= num 0.95&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ estimate   : Named num [1:2] 10.17 9.84&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr [1:2] &#34;mean of x&#34; &#34;mean of y&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ null.value : Named num 0&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr &#34;difference in means&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ stderr     : num 1.04&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ alternative: chr &#34;two.sided&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ method     : chr &#34;Welch Two Sample t-test&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ data.name  : chr &#34;pop1 and pop2&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;class&#34;)= chr &#34;htest&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is not a data frame, but an &amp;lsquo;htest&amp;rsquo; class object. Further, it cannot be converted to a data frame in the usual way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tresult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as.data.frame.default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tresult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class&lt;/span&gt; ‘&lt;span class=&#34;s&#34;&gt;&amp;#34;htest&amp;#34;&lt;/span&gt;’ &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data.frame&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is precisely why the tidyverse developed the &lt;a href=&#34;https://generics.r-lib.org/reference/tidy.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;broom::tidy()&lt;/code&gt;&lt;/a&gt; function, which works with legacy base-R outputs, and converts them to data frames. But if you have lots of t-tests, the overhead of converting all the outputs using broom, then using dplyr functions to access data, can be inefficient and overkill.&lt;/p&gt;
&lt;p&gt;The t-test output is not a data frame, but it &lt;strong&gt;is&lt;/strong&gt; a named list, so we can subset it directly. For example, to pull out the &lt;code&gt;p.value&lt;/code&gt; we can do either:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.7507211&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;p.value&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.7507211&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;which is really much simpler than going through broom. In addition, we can get extra granularity very quickly using this notation. Say we want the lower bound of the confidence interval. We can &amp;lsquo;stack&amp;rsquo; indexes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -1.774624&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;conf.int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -1.774624&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is saying &amp;lsquo;give me the 4th element (or the conf.int element), and then give me the 1st element of that&amp;rsquo;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Reuse the t.test() code above, run &lt;code&gt;str&lt;/code&gt; on the output, and extract the &lt;code&gt;stderr&lt;/code&gt; value using both the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;[[ ]]&lt;/code&gt; indexing approaches.&lt;/p&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;stderr&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1.041051&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tresult&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1.041051&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;When we ran our first ANOVA, we never actually looked at the data structure that was produced.&lt;/p&gt;
&lt;p&gt;Run the following code and inspect the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;bill_length_anova&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; 
  &lt;span class=&#34;nf&#34;&gt;aov&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;penguins&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drop_na&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;bill_length_mm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;species&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;species&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aieee!&lt;/p&gt;
&lt;p&gt;What happens when you try to turn this into a data frame, using &lt;code&gt;as.data.frame(bill_length_anova)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Now you can see why &lt;code&gt;broom:tidy()&lt;/code&gt; is so useful! To remind yourselves what the tidied version looks like, run the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;tidy_anova&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;broom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;tidy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tidy_anova&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But we can still extract values from this data structure directly: you just have to work out where to look&amp;hellip;&lt;/p&gt;
&lt;p&gt;See if you can extract the total residual df from this data structure using the $ notation.&lt;/p&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;bill_length_anova&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/aov.html&#39;&gt;aov&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&lt;a href=&#39;https://magrittr.tidyverse.org/reference/pipe.html&#39;&gt;%&amp;gt;%&lt;/a&gt;&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://tidyr.tidyverse.org/reference/drop_na.html&#39;&gt;drop_na&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
      &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;~&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;sex&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sex&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 13&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ coefficients : Named num [1:6] 37.26 9.32 8.31 3.13 1.39 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr [1:6] &#34;(Intercept)&#34; &#34;speciesChinstrap&#34; &#34;speciesGentoo&#34; &#34;sexmale&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ residuals    : Named num [1:333] -1.29 2.242 3.042 -0.558 -1.09 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr [1:333] &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ effects      : Named num [1:333] -802.79 44.75 70.8 33.7 3.82 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr [1:333] &#34;(Intercept)&#34; &#34;speciesChinstrap&#34; &#34;speciesGentoo&#34; &#34;sexmale&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ rank         : int 6&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ fitted.values: Named num [1:333] 40.4 37.3 37.3 37.3 40.4 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;names&#34;)= chr [1:333] &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ assign       : int [1:6] 0 1 1 2 3 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ qr           :List of 5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ qr   : num [1:333, 1:6] -18.2483 0.0548 0.0548 0.0548 0.0548 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;dimnames&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..$ : chr [1:333] &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..$ : chr [1:6] &#34;(Intercept)&#34; &#34;speciesChinstrap&#34; &#34;speciesGentoo&#34; &#34;sexmale&#34; ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;assign&#34;)= int [1:6] 0 1 1 2 3 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;contrasts&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..$ species: chr &#34;contr.treatment&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..$ sex    : chr &#34;contr.treatment&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ qraux: num [1:6] 1.05 1.03 1.05 1.05 1.03 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ pivot: int [1:6] 1 2 3 4 5 6&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ tol  : num 1e-07&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ rank : int 6&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;class&#34;)= chr &#34;qr&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ df.residual  : int 327&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ contrasts    :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ species: chr &#34;contr.treatment&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ sex    : chr &#34;contr.treatment&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ xlevels      :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ species: chr [1:3] &#34;Adelie&#34; &#34;Chinstrap&#34; &#34;Gentoo&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ sex    : chr [1:2] &#34;female&#34; &#34;male&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ call         : language aov(formula = bill_length_mm ~ species + sex + species * sex, data = penguins %&amp;gt;%      drop_na())&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ terms        :Classes &#39;terms&#39;, &#39;formula&#39;  language bill_length_mm ~ species + sex + species * sex&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;variables&#34;)= language list(bill_length_mm, species, sex)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;factors&#34;)= int [1:3, 1:3] 0 1 0 0 0 1 0 1 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;dimnames&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. ..$ : chr [1:3] &#34;bill_length_mm&#34; &#34;species&#34; &#34;sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. ..$ : chr [1:3] &#34;species&#34; &#34;sex&#34; &#34;species:sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;term.labels&#34;)= chr [1:3] &#34;species&#34; &#34;sex&#34; &#34;species:sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;order&#34;)= int [1:3] 1 1 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;intercept&#34;)= int 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;response&#34;)= int 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;.Environment&#34;)=&amp;lt;environment: R_GlobalEnv&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;predvars&#34;)= language list(bill_length_mm, species, sex)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..- attr(*, &#34;dataClasses&#34;)= Named chr [1:3] &#34;numeric&#34; &#34;factor&#34; &#34;factor&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;names&#34;)= chr [1:3] &#34;bill_length_mm&#34; &#34;species&#34; &#34;sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ model        :&#39;data.frame&#39;:  333 obs. of  3 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ bill_length_mm: num [1:333] 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ species       : Factor w/ 3 levels &#34;Adelie&#34;,&#34;Chinstrap&#34;,..: 1 1 1 1 1 1 1 1 1 1 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ sex           : Factor w/ 2 levels &#34;female&#34;,&#34;male&#34;: 2 1 1 1 2 1 2 1 2 2 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;terms&#34;)=Classes &#39;terms&#39;, &#39;formula&#39;  language bill_length_mm ~ species + sex + species * sex&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;variables&#34;)= language list(bill_length_mm, species, sex)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;factors&#34;)= int [1:3, 1:3] 0 1 0 0 0 1 0 1 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. ..- attr(*, &#34;dimnames&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. .. ..$ : chr [1:3] &#34;bill_length_mm&#34; &#34;species&#34; &#34;sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. .. ..$ : chr [1:3] &#34;species&#34; &#34;sex&#34; &#34;species:sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;term.labels&#34;)= chr [1:3] &#34;species&#34; &#34;sex&#34; &#34;species:sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;order&#34;)= int [1:3] 1 1 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;intercept&#34;)= int 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;response&#34;)= int 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;.Environment&#34;)=&amp;lt;environment: R_GlobalEnv&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;predvars&#34;)= language list(bill_length_mm, species, sex)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. ..- attr(*, &#34;dataClasses&#34;)= Named chr [1:3] &#34;numeric&#34; &#34;factor&#34; &#34;factor&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. .. .. ..- attr(*, &#34;names&#34;)= chr [1:3] &#34;bill_length_mm&#34; &#34;species&#34; &#34;sex&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;class&#34;)= chr [1:2] &#34;aov&#34; &#34;lm&#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as.data.frame.default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 
  &lt;span class=&#34;n&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class&lt;/span&gt; ‘&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;aov&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;’ &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data.frame&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tidy_anova&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;broom&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://generics.r-lib.org/reference/tidy.html&#39;&gt;tidy&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;tidy_anova&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 4 × 6&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   term           df  sumsq  meansq statistic    p.value&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;  &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;   &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;      &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt; species         2 &lt;span style=&#39;text-decoration: underline;&#39;&gt;7&lt;/span&gt;015.  &lt;span style=&#39;text-decoration: underline;&#39;&gt;3&lt;/span&gt;508.      654.    5.03&lt;span style=&#39;color: #555555;&#39;&gt;e&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;-115&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt; sex             1 &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;136.  &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;136.      212.    2.42&lt;span style=&#39;color: #555555;&#39;&gt;e&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;- 37&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;3&lt;/span&gt; species:sex     2   24.5   12.2       2.28  1.03&lt;span style=&#39;color: #555555;&#39;&gt;e&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;-  1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;4&lt;/span&gt; Residuals     327 &lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;753.     5.36     &lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;    &lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;   &lt;span style=&#39;color: #555555;&#39;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;bill_length_anova&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df.residual&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 327&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Club S02E06: Visualizing Data</title>
      <link>https://biodash.github.io/codeclub/s02e06_ggplot2/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s02e06_ggplot2/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the philosophy of &lt;strong&gt;coding&lt;/strong&gt; a graphic.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a &lt;strong&gt;ggplot&lt;/strong&gt; graphic, so you can reuse it for multiple chart types.&lt;/li&gt;
&lt;li&gt;Learn how you can quickly add visual information to a graphic using &lt;strong&gt;aesthetics&lt;/strong&gt; and &lt;strong&gt;layers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-the-ggplot-philosophy&#34;&gt;Intro: The ggplot philosophy&lt;/h2&gt;
&lt;p&gt;We have seen that in R, instead of manually manipulating data frames with a mouse as you do when editing Excel spreadsheets, we &lt;strong&gt;code&lt;/strong&gt; the operations we want to perform using &lt;code&gt;dplyr&lt;/code&gt; verbs like &lt;code&gt;select()&lt;/code&gt;, &lt;a href=&#34;https://rdrr.io/r/stats/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;arrange()&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;In a similar way when performing visualization, instead of clicking on a chart type in Excel and selecting options, we &lt;strong&gt;code the chart&lt;/strong&gt; in R.&lt;/p&gt;
&lt;p&gt;And just as &lt;code&gt;dplyr&lt;/code&gt; gives us efficient ways to manipulate data frames, &lt;code&gt;ggplot2&lt;/code&gt; (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics (we use these terms interchangeably).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;gg&lt;/strong&gt; in &lt;strong&gt;gg&lt;/strong&gt;plot2 stands for &lt;em&gt;grammar of graphics&lt;/em&gt;, a systematic approach for designing statistical plots developed by Leland Wilkinson. The idea behind this is to think about &amp;lsquo;pulling apart&amp;rsquo; various plots into their component pieces, then provide code that could put those pieces together again in different ways to make new plots.&lt;/p&gt;
&lt;p&gt;This notion of pulling apart a graphic leads to the idea of &lt;em&gt;layers&lt;/em&gt;. You can build up a plot of any complexity by &lt;em&gt;overlaying&lt;/em&gt; different views of the same data.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a learning curve here for sure, but there are many advantages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, &lt;em&gt;every&lt;/em&gt; graphic shares a &lt;strong&gt;common template&lt;/strong&gt;. Once you understand this structure you can &amp;ldquo;say&amp;rdquo; a lot of different things.&lt;br&gt;
(And I mean a &lt;em&gt;lot&lt;/em&gt;. The &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot cheat sheet&lt;/a&gt; lists over 40 plot-types, but because this is a language in its own right, users can create their own &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensions&lt;/a&gt; that you can also utilize, adding over 80 more.)&lt;/li&gt;
&lt;li&gt;Second, because the graphic is now a piece of code, it is &lt;em&gt;reusable&lt;/em&gt;. Once you have a little library of graphs you&amp;rsquo;ve made, you can tweak them in various ways to make more. You can also share your code with others, so they can apply the same approach to their data.&lt;/li&gt;
&lt;li&gt;Third, the way we put layers together is identical to the way we use pipes. You can read &lt;code&gt;%&amp;gt;%&lt;/code&gt; as &lt;em&gt;and then&lt;/em&gt;: &amp;ldquo;&lt;code&gt;select()&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;a href=&#34;https://rdrr.io/r/stats/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;mutate()&lt;/code&gt;&amp;rdquo;. In graphics, the &amp;ldquo;and then&amp;rdquo; symbol is &lt;a href=&#34;https://rdrr.io/r/base/Arithmetic.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt;: &amp;ldquo;show this layer, &lt;em&gt;and then&lt;/em&gt; add this layer, &lt;em&gt;and then&lt;/em&gt; add this layer&amp;rdquo;. In this way you can gradually build up a graphic of increasing complexity; or on the other hand take someone else&amp;rsquo;s code and simplify it by deleting layers.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-first-example&#34;&gt;A First Example&lt;/h2&gt;
&lt;p&gt;So how does this work in practice? We&amp;rsquo;ll work through visualizing aspects of the &lt;a href=&#34;https://allisonhorst.github.io/palmerpenguins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;palmerpenguins&lt;/a&gt; package which was introduced in &lt;a href=&#34;https://biodash.github.io/codeclub/s02e04_tidyverse-intro-part1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;S02E04 Intro to the Tidyverse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, &lt;strong&gt;ggplot2&lt;/strong&gt; is part of the tidyverse package so we need to load that as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# this assumes you&#39;ve already installed tidyverse and palmerpenguins with install.packages()&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://allisonhorst.github.io/palmerpenguins/&#39;&gt;palmerpenguins&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And recall that the &lt;strong&gt;penguins&lt;/strong&gt; dataset is included in that package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;glimpse&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Rows: 344&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Columns: 8&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ species           &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ island            &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ bill_length_mm    &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ bill_depth_mm     &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ flipper_length_mm &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ body_mass_g       &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ sex               &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt; male, female, female, NA, female, male, female, male…&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ year              &lt;span style=&#39;color: #555555; font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What is the correlation between bill-length and bill-width in these species?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;culmen_depth.png&#34; style=&#34;width:50.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Are longer bills also deeper? We can explore this with a &lt;strong&gt;scatterplot&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But first let&amp;rsquo;s look at the &lt;code&gt;ggplot()&lt;/code&gt; &lt;strong&gt;template&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the &lt;em&gt;package&lt;/em&gt; is &lt;strong&gt;ggplot2&lt;/strong&gt;, the &lt;em&gt;command&lt;/em&gt; is just &lt;code&gt;ggplot()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = &amp;lt;DATA&amp;gt;) + 
  &amp;lt;GEOM_FUNCTION&amp;gt;(mapping = aes(&amp;lt;MAPPINGS&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the obligatory parts of any plot: &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;geoms&lt;/strong&gt;, and &lt;strong&gt;mappings&lt;/strong&gt;. The first argument to &lt;code&gt;ggplot()&lt;/code&gt; is the data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is not very interesting! but it&amp;rsquo;s notable that it is &lt;em&gt;something&lt;/em&gt;. &lt;code&gt;ggplot()&lt;/code&gt; has created a base coordinate system (a base layer) that we can add visual layers to. It&amp;rsquo;s completely uninfomative because we haven&amp;rsquo;t said how we want the data (or even which data) to be mapped to graphic elements.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;add a layer&lt;/em&gt; operator is &amp;ldquo;&lt;strong&gt;+&lt;/strong&gt;&amp;rdquo;, which is the &lt;code&gt;ggplot&lt;/code&gt; equivalent of the pipe symbol, and best practice is to &lt;strong&gt;place it at the end of the line&lt;/strong&gt;, just like the pipe. This makes your layers more readable in the code (and can lead to problems if you put it some other places).&lt;/p&gt;
&lt;p&gt;The next argument specifies the kind plot we want: scatterplot, bar chart, fitted line, boxplot, violin plot, etc, etc. &lt;strong&gt;ggplot2&lt;/strong&gt; refers to these as &lt;strong&gt;geoms&lt;/strong&gt;: each different plot-type uses a different &lt;strong&gt;geom&lt;/strong&gt;etrical object to represent data.&lt;/p&gt;
&lt;p&gt;You can see an overview of many of these geoms in the &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheet&lt;/a&gt;.The geom for a scatterplot is &lt;code&gt;geom_point()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we also require a &lt;code&gt;mapping&lt;/code&gt; argument, which maps the &lt;em&gt;variables&lt;/em&gt; or columns in the dataset we want to focus on to their &lt;em&gt;visual representation&lt;/em&gt; in the plot.&lt;/p&gt;
&lt;p&gt;And finally we need to specify &lt;strong&gt;aesthetics&lt;/strong&gt; for the geometric objects in the plot, which will control things like shape, color, transparency, etc. Perhaps surprisingly, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates of the points are aesthetics, since these control, not the shape or color, but the relative &lt;strong&gt;position&lt;/strong&gt; of the points in the plot. (After all, flipping the &lt;code&gt;x&lt;/code&gt; for &lt;code&gt;y&lt;/code&gt; in some plots will flip the plot 90 degrees.)&lt;/p&gt;
&lt;p&gt;Sounds like a lot when you spell it all out, but it&amp;rsquo;s actually pretty simple in practice. Here then is our complete first plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Hmmm&amp;hellip; the relationship is not very clear, but I guess if you squint your eyes you can maybe see some local positive correlations? We&amp;rsquo;ll explore this relationship in more detail below using extra aesthetics.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s get coding!&lt;/p&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Create a scatterplot comparing body mass and flipper length. Does it look like there is any correlation?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Check the output of the glimpse() function to see what the precise variable names for body mass and flipper length are. It&#39;s up to you which you assign to x and y. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-5-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-power-of-aesthetics&#34;&gt;The power of aesthetics&lt;/h2&gt;
&lt;p&gt;We saw above that the relationship between bill length and bill depth is not particularly clear; but that there &lt;em&gt;might&lt;/em&gt; be some local patterns. How can we explore this? Is it possible that these clusters correspond somehow to the three different species: &lt;em&gt;Adelie&lt;/em&gt;, &lt;em&gt;Chinstrap&lt;/em&gt;, and &lt;em&gt;Gentoo&lt;/em&gt;? Part of the problem with our original plot may be that we are lumping all the data from all three species together. We can quickly explore this by adding an extra aesthetic.&lt;/p&gt;
&lt;p&gt;Our current plot uses two &lt;strong&gt;numeric&lt;/strong&gt; variables: &lt;code&gt;bill_length_mm&lt;/code&gt; and &lt;code&gt;bill_depth_mm&lt;/code&gt;. We can add a third &lt;strong&gt;categorical&lt;/strong&gt; variable, like &lt;code&gt;species&lt;/code&gt;, to a two dimensional scatterplot by mapping it to a different visual aesthetic. We&amp;rsquo;ve mapped length and depth to &lt;code&gt;x,y&lt;/code&gt; coordinates. Now we&amp;rsquo;ll simultaneously map species to &lt;code&gt;color&lt;/code&gt; by expanding our list of aesthetics.&lt;/p&gt;
&lt;p&gt;But before we do that, let&amp;rsquo;s improve our plotting commands a little.&lt;/p&gt;
&lt;p&gt;First, our template includes a general &lt;code&gt;mapping =&lt;/code&gt; directive, which in turn includes a bunch of &lt;em&gt;specific&lt;/em&gt; mappings from variables to aesthetics. While I think it&amp;rsquo;s quite useful to be explicit that this is a mapping component (which connects columns with graphical objects) it turns out we can drop the &lt;code&gt;mapping =&lt;/code&gt; syntax completely (and many people do). The very fact we have specific mappings inside &lt;code&gt;aes()&lt;/code&gt; makes the &lt;code&gt;mapping =&lt;/code&gt; redundant. (I&amp;rsquo;ve come to think of it as &amp;lsquo;syntactic sugar&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;Second, we can actually pipe the dataset into the &lt;code&gt;ggplot()&lt;/code&gt; command! We then set the mappings, and then choose our geom in a new layer. This is very common. Our new syntax looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s add an extra aesthetic for the &lt;code&gt;species&lt;/code&gt; variable. For this example we&amp;rsquo;ll use the &lt;code&gt;color&lt;/code&gt; aesthetic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We get a neat legend on the right hand side for free. It&amp;rsquo;s much clearer now that, within each species, there does seem to be a positive correlation between length and depth. It&amp;rsquo;s just that the absolute values for each species fall in different regions of &amp;ldquo;bill space&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Notice:&lt;/em&gt; We are piping &lt;em&gt;the entire raw dataset&lt;/em&gt; into the plot here, while only graphing part of it. The elegance of the pipe syntax is that we can first pass the dataset through a series of &lt;code&gt;dplyr&lt;/code&gt; operations - filtering and mutating etc. - and then pipe that modified dataset directly into our plotting commands. We&amp;rsquo;ll see more of that in coming Code Clubs (and Exercise 3)!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Go back to your body_mass/flipper data and color by species, also using our new syntax.&lt;/p&gt;
&lt;p&gt;There are various aesthetics you can use for a categorical variable (see help for geom_point). One is &lt;code&gt;shape&lt;/code&gt;. Try this instead of &lt;code&gt;color&lt;/code&gt; and see which you prefer.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Solutions (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-8-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;, shape &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-9-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-fitted-line-geom-geom_smooth&#34;&gt;The fitted-line geom: &lt;code&gt;geom_smooth()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In the scatterplot for bill length vs. bill depth, there wasn&amp;rsquo;t a very clean overall positive relationship. We can make this even more apparent visually by fitting a line to the data: &lt;em&gt;overlaying&lt;/em&gt; another geom in the same plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-10-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Technical note:&lt;/em&gt; by default, the &lt;code&gt;geom_smooth()&lt;/code&gt; function doesn&amp;rsquo;t use classical linear regression to fit the data. Instead it uses &lt;strong&gt;lo&lt;/strong&gt;cally &lt;strong&gt;e&lt;/strong&gt;stimated &lt;strong&gt;s&lt;/strong&gt;catterplot &lt;strong&gt;s&lt;/strong&gt;moothing: &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Local_regression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;loess&lt;/a&gt;. This snakes around and tries to find a more local best fit to the data. You can request different fit algorithms with the &lt;code&gt;method&lt;/code&gt; option. See help for &lt;code&gt;geom_smooth&lt;/code&gt; for details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But again, this is messy since we are trying to analyze all the data at once. What if we set the species aesthetic before we apply &lt;em&gt;any&lt;/em&gt; geom, so that the aesthetic is inherited by &lt;em&gt;both&lt;/em&gt; geoms?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-11-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here we can see there does seem to be a strong positive correlation if we analyze the data species-by-species.&lt;/p&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit your flipper/body_mass data, and fit lines to each species.&lt;/p&gt;
&lt;p&gt;There is a lot of overlap between two of the species in the scatterplot, which makes it hard to see the overall patterns for those two species. Does the fitted line overlay help make sense of this?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Perhaps you think this plot is too noisy, with the scatterplot data messing up the basic linear relationships. Modify your plot so it just shows the linear layer without the scatterplot layer.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Remember you can delete layers just as easily as you can add layers. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;(Bonus: if you have time&amp;hellip;)&lt;/p&gt;
&lt;p&gt;Pipe your dataset into a dplyr &lt;a href=&#34;https://rdrr.io/r/stats/filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; command which pulls out just the &lt;code&gt;Gentoo&lt;/code&gt; data; then pipe that data into the &lt;code&gt;ggplot()&lt;/code&gt; command, to create a scatterplot, together with a smoothed-line overlay, for just that one species.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Remember two important things about the filter() function: (i) the check for equality is a double equals sign == (ii) the species name is a character string, not a number, so has to be quoted with &#34;...&#34;. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Gentoo&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;body_mass_g&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;flipper_length_mm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Code Club S02E03: R Markdown</title>
      <link>https://biodash.github.io/codeclub/s02e03_rmarkdown/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/s02e03_rmarkdown/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;R Markdown consists of an amazing ecosystem of R packages to produce many types of technical content. Its signature capability is that is can &lt;strong&gt;print formatted text, run R code, and display the results, all inside a single document&lt;/strong&gt;. Furthermore, you can easily export this document in a large variety of formats, including HTML, PDF, Word, RTF, etc. The webpage you are looking at now was written (almost) completely in R Markdown.&lt;/p&gt;
&lt;p&gt;At the most basic level, instead of using comments interleaved with your code in an R script:&lt;br&gt;
&lt;code&gt;# This is a comment&lt;/code&gt;&lt;br&gt;
you can insert formatted text around your code in an R Markdown file. You can structure your document with headings and subheadings. You can add tables of contents. You can even generate formatted bibliographies. And the R code you insert in the document runs &lt;strong&gt;inside the document&lt;/strong&gt; and the results go to the document itself, not to the console or (in the case of plots) to the Plots pane in RStudio.&lt;/p&gt;
&lt;p&gt;This makes RMarkdown a great &lt;strong&gt;computer lab notebook&lt;/strong&gt;, since you can explain what you&amp;rsquo;re doing and why (to colleagues or your future self). It&amp;rsquo;s also an example of &lt;strong&gt;reproducible research&lt;/strong&gt; since you share not just a Word file, say, with example code, but an active document in which the code actually runs and the results are reproduced.&lt;/p&gt;
&lt;p&gt;To understand R Markdown, we need to learn about three new things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;, a very lightweight text formatting language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code chunks&lt;/strong&gt;, which allow us to incorporate R code that can be executed and whose results we can display in text, figures, and tables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The YAML header&lt;/strong&gt;, which encodes metadata about the output, such as the desired output format and specific formatting features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll focus on HTML output, but will also glance at other possibilities for the output format: with R Markdown, it is possible to create not just technical reports, but also slide decks, websites, books, scientific articles, dissertations, and so on.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;
&lt;p&gt;At the core of the R Markdown ecosystem is the &lt;em&gt;rmarkdown&lt;/em&gt; package. We need to install this but don&amp;rsquo;t need to load it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;rmarkdown&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Inside your directory for Code Club, create a folder for this week:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#39;S02E03&#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Select this folder in the Files pane. Then make this your working directory, using &amp;ldquo;Set as Working Directory&amp;rdquo; from the More options:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;figs/setwd.jpg&#34; width=&#34;1000px&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;(You don&amp;rsquo;t need to do this now: we&amp;rsquo;ll make it part of the first Breakout Room in just a moment&amp;hellip;)&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;first-an-example&#34;&gt;First, an example&lt;/h4&gt;
&lt;p&gt;Before we go into details, let&amp;rsquo;s first see a quick demonstration of what we&amp;rsquo;re talking about. RStudio lets you create an example R Markdown document with a couple of clicks. Here are the instructions: I&amp;rsquo;ll run through them, and then we&amp;rsquo;ll open Breakout rooms so you can try it out yourself.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code&gt;File&lt;/code&gt; =&amp;gt; &lt;code&gt;New File&lt;/code&gt; =&amp;gt; &lt;code&gt;R Markdown&lt;/code&gt;, change the &lt;em&gt;Title&lt;/em&gt; to &amp;ldquo;Markdown demo&amp;rdquo;, and click &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take a look at the R Markdown document, and notice that there seems to be some sort of header bounded by three dashes (=&amp;gt; &lt;em&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/em&gt;), followed by R code wrapped in strange constructs with backticks and curly brackets (=&amp;gt; &lt;em&gt;&lt;strong&gt;Code chunks&lt;/strong&gt;&lt;/em&gt;), and formatted written text (=&amp;gt; &lt;em&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before we can render the output, we need to save the document. Click the &lt;code&gt;Save&lt;/code&gt; button and save the files as &lt;code&gt;demo.Rmd&lt;/code&gt; inside your newly created directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now click the &lt;strong&gt;Knit button&lt;/strong&gt; in one of the top bars, and a document should show up in a pop-up in the Viewer pane. This is the &lt;em&gt;rendered output&lt;/em&gt; from the R Markdown document, which is translated from Markdown into HTML behind the scenes, and displayed using a built in web-browser.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that the YAML header is not printed (at least not verbatim) while some of the code is printed (some is hidden), and we also see code output, including a plot!&lt;/p&gt;
&lt;p&gt;This is what the raw and rendered output look side-by-side:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;img/rmd-demo-both.png&#34; width=&#34;1000px&#34;/&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;breakout-room-1&#34;&gt;Breakout Room 1&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Work through the example above yourselves. Generate a sample R Markdown file, in the correct directory, look at the contents, and make sure you can render it on your system using the &amp;ldquo;Knit&amp;rdquo; to HTML button in the top command bar.&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;We&amp;rsquo;ll now talk about Markdown, code chunks, and the YAML header in turn.&lt;/p&gt;
&lt;h2 id=&#34;i-markdown&#34;&gt;I: Markdown&lt;/h2&gt;
&lt;p&gt;To fully appreciate the magic of Markdown and where it came from, it&amp;rsquo;s useful to just briefly visit the notion of a &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Markup_language&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markup language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The original markup was done by a subeditor using a blue pencil on a handwritten or typed manuscript. This markup included typographic instructions for printing, like making a heading larger or text boldface, etc.&lt;/p&gt;
&lt;p&gt;Computer Markup languages have the same kind of annotations, which are included in the plain text, but are visually different from the content. This marked-up text is then sent to an interpreter (e.g. a web browser, a PDF viewer, an app like Word) which renders the final document.&lt;/p&gt;
&lt;p&gt;A large number of markup languages have been developed over the years. At current count there are about 60. This is how you would markup italic text in a small selection of them:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;i&amp;gt;This text is italic&amp;lt;/i&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word .docx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;w:t&amp;gt;This is italic text.&amp;lt;/w:t&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TeX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\textit{This text is italic}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ODF text document .odt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;text:p text:style-name=&amp;quot;P1&amp;quot;&amp;gt;This text is italic.&amp;lt;/text:p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rich text format .rtf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{\rtlch\ai \ltrch\loch\i\loch This text is italic.}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some of these are more readable than others. Some are never meant to be read by humans at all! But underneath the hood &lt;strong&gt;every format is actually Markup&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The aim of Markdown is to create &lt;em&gt;lightweight&lt;/em&gt; Markup language, which is &lt;strong&gt;easy to read and easy to write&lt;/strong&gt; in a text editor. It embodies the principle: &amp;ldquo;make common things easy, and rare things possible&amp;rdquo;. Then we let the computer do the work of translating Markdown into various markup languages and rendering them, so we don&amp;rsquo;t have to worry about the details:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*This text is italic.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Swiss Army Knife&amp;rdquo; for letting the computer convert between Markup languages is &lt;a href=&#34;https://pandoc.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandoc&lt;/a&gt;. The Pandoc site contains a graphic which shows what can be translated to what (included here just to give you a sense of the extent of this Markup world):&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Click here to see the Pandoc figure
&lt;/summary&gt;
&lt;p&gt;&lt;img src=&#34;figs/pandoc.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;R Markdown uses Pandoc as its engine for translating Markdown to various Markup languages.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;an-overview-of-commonly-used-markdown-syntax&#34;&gt;An overview of commonly used Markdown syntax&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;# My Title&lt;/td&gt;
&lt;td&gt;Header level 1 (largest)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;## My Section&lt;/td&gt;
&lt;td&gt;Header level 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;### My Subsection&lt;/td&gt;
&lt;td&gt;Header level 3 &amp;ndash; and so forth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*italic* or _italic_&lt;/td&gt;
&lt;td&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**bold** or __bold__&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Markdown Guide](markdownguide.org)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://markdownguide.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown Guide&lt;/a&gt; (Link with custom text)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;![](path/to/figure.png)&lt;/td&gt;
&lt;td&gt;Figure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- List item&lt;/td&gt;
&lt;td&gt;Unordered (bulleted) list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1. List item&lt;/td&gt;
&lt;td&gt;Ordered (numbered) list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;`inline code`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;```&lt;/code&gt; &lt;br&gt; &amp;hellip;code&amp;hellip; &lt;br&gt; &lt;code&gt;```&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Generic code block (for formatting only) &lt;br&gt; (&lt;em&gt;Alternative syntax: 4 leading spaces.&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;```r&lt;/code&gt; &lt;br&gt; &amp;hellip;code&amp;hellip; &lt;br&gt; &lt;code&gt;```&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt; code block (for formatting only)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;---&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Horizontal rule (line)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below you&amp;rsquo;ll see an examples of raw Markdown on the left, and its &lt;em&gt;rendered&lt;/em&gt; (formatted) output on the right:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/md-demo.png width=&#34;2000px&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&amp;ldquo;Plain&amp;rdquo; Markdown files have the extension &lt;code&gt;.md&lt;/code&gt;, whereas R Markdown&lt;/p&gt;
&lt;p&gt;files have the extension &lt;code&gt;.Rmd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ii-integrating-r-code&#34;&gt;II: Integrating R code&lt;/h2&gt;
&lt;p&gt;As we saw above, plain Markdown has syntax for code &lt;em&gt;formatting&lt;/em&gt;, but the code is not actually being executed. &lt;strong&gt;In R Markdown, however, we are able run code!&lt;/strong&gt; The syntax to do so is only slightly modified from what we saw above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;inline code&lt;/strong&gt;, we add &lt;code&gt;r&lt;/code&gt; and a space before the R code that is to be executed, for example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Raw&lt;/th&gt;
&lt;th&gt;Rendered&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;There are &lt;code&gt;`365*24`&lt;/code&gt; hours in a year&lt;/td&gt;
&lt;td&gt;There are &lt;code&gt;365*24&lt;/code&gt; hours in a year&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;There are &lt;code&gt;`r 365*24`&lt;/code&gt; hours in a year&lt;/td&gt;
&lt;td&gt;There are 8760 hours in a year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To generate &lt;em&gt;code blocks&lt;/em&gt;, which we call &lt;strong&gt;code chunks&lt;/strong&gt; in an R Markdown context,&lt;br&gt;
we add r &lt;em&gt;inside curly braces&lt;/em&gt;: &lt;code&gt;```{r}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can optionally add settings that we want to apply to that chunk:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;```{r, option1=value, ...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These options control things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do you want your code to be displayed in the document, or just the results?&lt;/li&gt;
&lt;li&gt;do you want alerts and warnings to be displayed or not?&lt;/li&gt;
&lt;li&gt;do you want to turn off results, temporarily or permanently?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many others.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;RStudio keyboard shortcut to insert a code chunk: &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;There is also an Insert Code Chunk Button in the top bar of RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&#34;code-chunk-examples&#34;&gt;Code chunk examples&lt;/h4&gt;
&lt;p&gt;In these examples we&amp;rsquo;ll use the &lt;a href=&#34;https://allisonhorst.github.io/palmerpenguins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Palmer Penguins&lt;/a&gt; dataset. To access this dataset yourself, do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;install.packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;palmerpenguins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;palmerpenguins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example code we&amp;rsquo;ll be using comes from the &lt;strong&gt;tidyverse&lt;/strong&gt; package. If you don&amp;rsquo;t have that installed yet, you need to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;install.packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tidyverse&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tidyverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(If you&amp;rsquo;ve participated in Code Club before you probably have these packages installed).&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry &lt;strong&gt;at all&lt;/strong&gt; if you don&amp;rsquo;t understand the example code. This is exactly what we&amp;rsquo;ll be moving onto in the coming weeks. The point is that the code is executed and displayed inside the document.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A code chunk with &lt;strong&gt;default options&lt;/strong&gt;&amp;hellip;&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-1.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&amp;hellip;will be executed and shown followed by the output of the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, na.rm &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 17.15117&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an example of using a &lt;strong&gt;code chunk option&lt;/strong&gt;, we will disable printing the code using &lt;code&gt;echo=FALSE&lt;/code&gt; (the code will still run and the output will still be shown):&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-2.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 17.15117&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Figures&lt;/strong&gt; have some specific options, including &lt;strong&gt;captions&lt;/strong&gt;:&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-3.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;theme_bw&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 2 rows containing missing values (geom_point).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; alt=&#34;Fig. 1: Bill length and depth are correlated within species, &amp;lt;br&amp;gt; and differ subtly between species.&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p class=&#34;caption&#34;&gt;
Fig. 1: Bill length and depth are correlated within species, &lt;br&gt; and differ subtly between species.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We added a caption for the figure using the &lt;code&gt;fig.cap&lt;/code&gt; option.&lt;/p&gt;
&lt;h4 id=&#34;code-chunk-options&#34;&gt;Code chunk options&lt;/h4&gt;
&lt;p&gt;There are huge number of options, and various options are specific to certain types of code chunks. Just learn the basic structure first, and if you ever wonder &amp;ldquo;Can I do X to modify the output?&amp;rdquo; just know that many, many people have wondered that before, and if it makes sense to do it, you can probably do it with options.&lt;/p&gt;
&lt;p&gt;Here is an overview of some the most commonly made &lt;em&gt;changes to defaults&lt;/em&gt; for code chunk options. This quickly gets confusing, but you&amp;rsquo;ll get the hang of it after experimenting a bit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo=FALSE&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print the code in the output file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval=FALSE&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t run (&lt;strong&gt;eval&lt;/strong&gt;uate) the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include=FALSE&lt;/code&gt; &amp;ndash; Run but don&amp;rsquo;t print the code, nor any of its results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;results=&amp;quot;hide&amp;quot;&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print the &lt;em&gt;text output&lt;/em&gt; of the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.show=&amp;quot;hide&amp;quot;&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print &lt;em&gt;figures&lt;/em&gt; produced by the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, you can use &lt;code&gt;message=FALSE&lt;/code&gt; and &lt;code&gt;warning=FALSE&lt;/code&gt; to suppress any &lt;em&gt;messages&lt;/em&gt; (like the output when loading packages) and &lt;em&gt;warnings&lt;/em&gt; (like the warning for the penguin figure above), respectively, that R might produce.&lt;/p&gt;
&lt;p&gt;For figures, the following options are especially useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.cap=&amp;quot;My caption&amp;quot;&lt;/code&gt; &amp;ndash; Include a caption.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.asp=0.6&lt;/code&gt; &amp;ndash; Aspect ratio.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.width=6&lt;/code&gt; &amp;ndash; Width of in inches: same as sizing in regular R code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.height=9.6&lt;/code&gt; &amp;ndash; Height in inches: same as sizing in regular R code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.width=&amp;quot;70%&amp;quot;&lt;/code&gt; &amp;ndash; Figure width as &lt;em&gt;printed in the document&lt;/em&gt; (in &lt;code&gt;%&lt;/code&gt; or pixels, &lt;code&gt;px&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.height=&amp;quot;500px&amp;quot;&lt;/code&gt; &amp;ndash; Figure height as &lt;em&gt;printed in the document&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iii-the-yaml-header&#34;&gt;III: The YAML header&lt;/h2&gt;
&lt;p&gt;YAML (&lt;em&gt;&amp;ldquo;YAML Ain&amp;rsquo;t Markup Language&amp;rdquo;&lt;/em&gt;) is a simple format commonly used for &lt;em&gt;configuration files&lt;/em&gt;, which allows you to provide key-value pairs such as &lt;code&gt;author: John Doe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In R Markdown files, it is used as a &lt;strong&gt;header&lt;/strong&gt; which configures certain aspects of the output, especially the formatting. Put another way, the YAML header &lt;em&gt;contains the metadata&lt;/em&gt; for the output.&lt;/p&gt;
&lt;h4 id=&#34;a-basic-yaml-header&#34;&gt;A basic YAML header&lt;/h4&gt;
&lt;p&gt;Here is an example of a very basic YAML header:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
author: My name
title: The document&#39;s title
output: html_document
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the lines which just contain &lt;strong&gt;three dashes&lt;/strong&gt;, which mark the beginning and the end of the YAML header.&lt;/p&gt;
&lt;h4 id=&#34;adding-extra-options&#34;&gt;Adding extra options&lt;/h4&gt;
&lt;p&gt;Often, a value (like &lt;code&gt;html_document&lt;/code&gt;) can itself be given key-value pairs to specify additional options &amp;ndash; see the example below where we include a Table of Contents (&lt;code&gt;toc&lt;/code&gt;) and also set it to &amp;ldquo;float&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
output:
  html_document:
    toc: true
    toc_float: true
---
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Note that indentation in YAML uses two (or four) spaces (no tabs!) per indentation level, and it is &lt;em&gt;sensitive to indentation errors&lt;/em&gt;. (Fortunately, RStudio inserts spaces for tabs by default &amp;ndash; check/set in &lt;code&gt;Tools&lt;/code&gt; =&amp;gt; &lt;code&gt;Global Options&lt;/code&gt; =&amp;gt; &lt;code&gt;Code&lt;/code&gt; =&amp;gt; &lt;code&gt;Editing&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h4 id=&#34;some-options-for-html_document-output&#34;&gt;Some options for &lt;code&gt;html_document&lt;/code&gt; output&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;html_document&lt;/code&gt; is the most commonly used output format for R Markdown documents, and here are few particularly useful options to customize the output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code_download: true&lt;/code&gt; &amp;ndash; Include a button to download the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code_folding: hide&lt;/code&gt; &amp;ndash; Using &lt;code&gt;hide&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt; will enable the folding of code chunks, with &lt;code&gt;hide&lt;/code&gt; hiding them by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toc: true&lt;/code&gt; &amp;ndash; Include a table of contents (Also: &lt;code&gt;toc_depth: 3&lt;/code&gt; sets depth to 3, &lt;code&gt;toc_float: true&lt;/code&gt; lets the TOC &amp;ldquo;float&amp;rdquo; as you scroll down the document).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number_sections: true&lt;/code&gt; &amp;ndash; Number the section headings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df_print: paged&lt;/code&gt; &amp;ndash; Get nicely formatted and paged data frame printing (also try: &lt;code&gt;df_print: kable&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme: cerulean&lt;/code&gt; &amp;ndash; Use a pre-built theme, controlling the overall look and feel of the document. See &lt;a href=&#34;https://www.datadreaming.org/post/r-markdown-theme-gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for a visual overview.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/rmd-3themes.png width=&#34;100%&#34;&gt;
&lt;figcaption&gt;
Three HTML document &lt;code&gt;theme&lt;/code&gt; options: &lt;code&gt;darkly&lt;/code&gt;, &lt;code&gt;flatly&lt;/code&gt;, and &lt;code&gt;cerulean&lt;/code&gt;.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iv-r-markdown-and-rstudio&#34;&gt;IV: R Markdown and RStudio&lt;/h2&gt;
&lt;p&gt;The R Markdown ecosystem of packages is being developed by RStudio, so it should come as no surprise that the RStudio IDE has some nice R Markdown functionality.&lt;/p&gt;
&lt;h4 id=&#34;knitting-and-previewing-your-document&#34;&gt;Knitting and previewing your document&lt;/h4&gt;
&lt;p&gt;The process of rendering an R Markdown file into another format, as specified by the YAML header, is called &lt;strong&gt;knitting&lt;/strong&gt;. We already saw the button to knit the current document (keyboard shortcut: &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;If you get preview pop-up windows in RStudio, click the cog wheel icon next to the Knit button, and then select &amp;ldquo;&lt;em&gt;Preview in Viewer Pane&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt; Instead of knitting the entire document, you can also &lt;strong&gt;run individual code chunks&lt;/strong&gt; using the green &amp;ldquo;play button&amp;rdquo; (or &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;), or all code chunks up until the current one (button to the left of the play button).&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;breakout-room-2&#34;&gt;Breakout Room 2&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;For this exercise, you&amp;rsquo;ll convert an R Script file into an R Markdown file.&lt;/p&gt;
&lt;p&gt;First you&amp;rsquo;ll download the script file to your working directory (using the code provided below). Then open it in R Studio, copy the contents, and paste the contents into your demo.Rmd file (after the YAML header). Then work through making adjustments, and Knit at various times to check your work.&lt;/p&gt;
&lt;p&gt;There are various suggestions (in parentheses) for Markdown formatting throughout the script.&lt;/p&gt;
&lt;p&gt;And remember, you need to wrap the actual R code from the script inside R Markdown code chunks.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll also download an example picture. Include this picture in your demo.Rmd file using the Markdown syntax shown above. Then experiment with the various figure options to get it how you want it.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll download the files in a similar way to last week. Execute the following code, either by copying into the console, or by creating a new script file and copying the commands into it, and executing them one by one. To keep things tidy and readable, first we create objects that hold the URLs we&amp;rsquo;re downloading from:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;script_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/S02E03_rmarkdown/demo.R&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;picture_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/S02E03_rmarkdown/picture.jpg&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then use the &lt;a href=&#34;https://rdrr.io/r/utils/download.file.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;download.file()&lt;/code&gt;&lt;/a&gt; function with two arguments, the remote URL and the local file name (which must be in quotes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;download.file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;script_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;demo.R&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;download.file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;picture_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;picture.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should end up with the two local files showing up in your Files pane.&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;v-a-single-source-doc-many-output-formats&#34;&gt;V: A single source doc, many output formats!&lt;/h2&gt;
&lt;p&gt;Because of the Pandoc backend, a great feature of R Markdown is that you can output to many formats. So from one source document, or very similar variants, you can create completely different output depending on what you need.&lt;/p&gt;
&lt;h4 id=&#34;built-in-output-formats&#34;&gt;Built-in output formats&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://rmarkdown.rstudio.com/docs/reference/index.html#section-output-formats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;built-in output formats&lt;/a&gt;, which can be used with just the &lt;em&gt;rmarkdown&lt;/em&gt; package, are listed below. These include HTML, PDF, Word, PowerPoint, and different HTML slide show formats.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/rmarkdown-output-formats.png width=&#34;80%&#34;&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;extension-output-formats&#34;&gt;Extension output formats&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s worth highlighting a few of the output formats that can be used with the following packages in the R Markdown ecosystem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/distill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;distill&lt;/em&gt;&lt;/a&gt; &amp;ndash; An output format geared towards technical content, e.g. with extended support for equations, citations, and footnotes. Can also create websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/rticles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;rticles&lt;/em&gt;&lt;/a&gt; &amp;ndash; R Markdown templates to format output for specific scientific journals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;flexdashboard&lt;/em&gt;&lt;/a&gt; &amp;ndash; Create interactive &amp;ldquo;dashboards&amp;rdquo; to present data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;bookdown&lt;/em&gt;&lt;/a&gt; &amp;ndash; A book format, the &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown book&lt;/a&gt; is an example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/xaringan.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;xaringan&lt;/em&gt;&lt;/a&gt; &amp;ndash; Create fancier presentation slides thanks to a JavaScript library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting to use these and other output formats is often as simple as changing the YAML header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;distill::distill_article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;h4 id=&#34;further-resources&#34;&gt;Further resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Free online books by the primary creator of R Markdown and other authors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown &amp;ndash; The Definitive Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&amp;rsquo;s 5-page R Markdown Reference PDF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&amp;rsquo;s R Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio R Markdown lessons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://commonmark.org/help/tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Session 19: Word Clouds via Tidytext</title>
      <link>https://biodash.github.io/codeclub/19_wordclouds/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/19_wordclouds/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the fundamentals of &lt;strong&gt;text mining&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Learn how to do text mining in a tidyverse setting.&lt;/li&gt;
&lt;li&gt;Reuse some of our dplyr and ggplot skills on text.&lt;/li&gt;
&lt;li&gt;Learn how to very simply create word cloud visualizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;This is another in our current series on text processing. We&amp;rsquo;ll be using the following previously used packages which you should load first (install them if you haven&amp;rsquo;t already):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://bakeoff.netlify.com&#39;&gt;bakeoff&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll also be using the following packages, which you should install and load:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Uncomment the following line to install:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# install.packages(c(&#34;tidytext&#34;, &#34;gutenbergr&#34;, &#34;wordcloud&#34;))&lt;/span&gt;
                 
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://github.com/juliasilge/tidytext&#39;&gt;tidytext&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://docs.ropensci.org/gutenbergr/&#39;&gt;gutenbergr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://blog.fellstat.com/?cat=11&#39;&gt;wordcloud&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this CodeClub session we&amp;rsquo;ll see how to create word clouds (also known as tag clouds) from text, using the &lt;strong&gt;tidytext&lt;/strong&gt; and &lt;strong&gt;wordcloud&lt;/strong&gt; packages. A word cloud is a visualization of word frequencies, graphically highlighting the most common words.&lt;/p&gt;
&lt;p&gt;We need to get some text from somewhere, so first let&amp;rsquo;s do it in the simplest possible way. Here we manually enter a quote, line by line, as a vector of five character strings. This is the first stanza from Robert Lowell&amp;rsquo;s &lt;a href=&#34;https://www.poetryfoundation.org/poems/47694/skunk-hour&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Skunk Hour&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lowell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;Nautilus Island&#39;s hermit&#34;&lt;/span&gt;,
          &lt;span class=&#39;s&#39;&gt;&#34;heiress still lives through winter in her Spartan cottage;&#34;&lt;/span&gt;,
          &lt;span class=&#39;s&#39;&gt;&#34;her sheep still graze above the sea.&#34;&lt;/span&gt;,
          &lt;span class=&#39;s&#39;&gt;&#34;Her son&#39;s a bishop. Her farmer is first selectman in our village;&#34;&lt;/span&gt;,
          &lt;span class=&#39;s&#39;&gt;&#34;she&#39;s in her dotage.&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In textual analysis we distinguish between word &lt;strong&gt;types&lt;/strong&gt;, and word &lt;strong&gt;tokens&lt;/strong&gt; (multiple instances of those words in text). For example there are two tokens of the word-type &amp;ldquo;still&amp;rdquo; in this stanza:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;heiress &lt;code&gt;still&lt;/code&gt; lives through winter&lt;br&gt;
her sheep &lt;code&gt;still&lt;/code&gt; graze above the sea&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And slightly more abstractly there are four tokens of &amp;ldquo;her&amp;rdquo;, modulo capitalization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;her&lt;/code&gt; Spartan cottage&lt;br&gt;
&lt;code&gt;her&lt;/code&gt; sheep still graze&lt;br&gt;
&lt;code&gt;Her&lt;/code&gt; son&amp;rsquo;s a bishop.&lt;br&gt;
&lt;code&gt;Her&lt;/code&gt; farmer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Formally, it&amp;rsquo;s the &lt;em&gt;token frequency&lt;/em&gt; of the &lt;em&gt;word types&lt;/em&gt; we are ultimately interested in capturing. So: two tasks, extract the word tokens, and count them! Done!&lt;/p&gt;
&lt;p&gt;The reason this is tricky is that natural language text is messy: the task of extracting a clean set of tokens to count is termed &lt;strong&gt;text mining&lt;/strong&gt; or &lt;strong&gt;tokenization&lt;/strong&gt;. We would also like to get the output into a tidyverse compliant data frame, so we can use familiar &lt;strong&gt;dplyr&lt;/strong&gt; and &lt;strong&gt;ggplot&lt;/strong&gt; functions to analyze it.&lt;/p&gt;
&lt;p&gt;We could imagine attacking this using &lt;strong&gt;stingr&lt;/strong&gt; functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lowell_tokens&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;lowell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;c&#39;&gt;# convert upper to lower case; returns a character vector.&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;str_to_lower&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;c&#39;&gt;# remove punctuation with a character class; returns a list.&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;str_extract_all&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;[a-z]+&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;c&#39;&gt;# flatten that list&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/unlist.html&#39;&gt;unlist&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;c&#39;&gt;# stick it in a data frame&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;as_tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;                      

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lowell_tokens&lt;/span&gt;, n &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;38&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 38 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    value    &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; nautilus &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; island   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; s        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; hermit   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; heiress  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; still    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; lives    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; through  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; winter   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;11&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;12&lt;/span&gt;&lt;span&gt; spartan  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;13&lt;/span&gt;&lt;span&gt; cottage  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;14&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;15&lt;/span&gt;&lt;span&gt; sheep    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;16&lt;/span&gt;&lt;span&gt; still    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;17&lt;/span&gt;&lt;span&gt; graze    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;18&lt;/span&gt;&lt;span&gt; above    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;19&lt;/span&gt;&lt;span&gt; the      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;20&lt;/span&gt;&lt;span&gt; sea      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;21&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;22&lt;/span&gt;&lt;span&gt; son      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;23&lt;/span&gt;&lt;span&gt; s        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;24&lt;/span&gt;&lt;span&gt; a        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;25&lt;/span&gt;&lt;span&gt; bishop   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;26&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;27&lt;/span&gt;&lt;span&gt; farmer   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;28&lt;/span&gt;&lt;span&gt; is       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;29&lt;/span&gt;&lt;span&gt; first    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;30&lt;/span&gt;&lt;span&gt; selectman&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;31&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;32&lt;/span&gt;&lt;span&gt; our      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;33&lt;/span&gt;&lt;span&gt; village  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;34&lt;/span&gt;&lt;span&gt; she      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;35&lt;/span&gt;&lt;span&gt; s        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;36&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;37&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;38&lt;/span&gt;&lt;span&gt; dotage&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is a good start: it gets rid of the capitalization issue, and also gets rid of the punctuation. But there&amp;rsquo;s a problem. The regular expression pattern &lt;code&gt;[a-z]+&lt;/code&gt; doesn&amp;rsquo;t recognize &lt;em&gt;possessives&lt;/em&gt; or &lt;em&gt;contractions&lt;/em&gt;: it just strips anything that&amp;rsquo;s not a letter, so it messes up with &lt;code&gt;Island&#39;s&lt;/code&gt;, &lt;code&gt;son&#39;s&lt;/code&gt;, and &lt;code&gt;she&#39;s&lt;/code&gt;: welcome to the subtleties of processing natural language text algorithmically! Exceptions, exceptions!!&lt;/p&gt;
&lt;p&gt;We could fiddle about with our regex, but&amp;hellip; &lt;em&gt;there&amp;rsquo;s a package for that!&lt;/em&gt; This kind of text mining is exactly what the &lt;a href=&#34;https://www.tidytextmining.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidytext&lt;/a&gt; package was built for. It will simultaneously strip punctuation intelligently and &amp;lsquo;unnest&amp;rsquo; lines into word tokens.&lt;/p&gt;
&lt;p&gt;Tidytext functions need a dataframe to operate on. So first we need to get the poem into a data frame; here we&amp;rsquo;ll use the column name &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lowell_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;text &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;lowell&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;lowell_df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 5 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   text                                                             &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;                                                            &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;&lt;span&gt; Nautilus Island&#39;s hermit                                         &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;&lt;span&gt; heiress still lives through winter in her Spartan cottage;       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;3&lt;/span&gt;&lt;span&gt; her sheep still graze above the sea.                             &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;4&lt;/span&gt;&lt;span&gt; Her son&#39;s a bishop. Her farmer is first selectman in our village;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;5&lt;/span&gt;&lt;span&gt; she&#39;s in her dotage.&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Each string in the character vector becomes a single row in the data frame.&lt;/p&gt;
&lt;p&gt;Again we want one word-token per row, to &amp;lsquo;tidy&amp;rsquo; our data. This is what &lt;a href=&#34;https://rdrr.io/pkg/tidytext/man/unnest_tokens.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tidytext::unnest_tokens()&lt;/code&gt;&lt;/a&gt; does. We&amp;rsquo;re going to unnest words in this case (we can unnest other things, like characters, sentences, regexes, even tweets) and we need to specify the variable in the dataframe we are unnesting (in this case just &lt;code&gt;text&lt;/code&gt;). This will create a new word-token data frame, and we&amp;rsquo;ll name the variable in the data frame &lt;code&gt;word&lt;/code&gt;. This is important (see later on stop words).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lowell_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;lowell_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/tidytext/man/unnest_tokens.html&#39;&gt;unnest_tokens&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;text&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lowell_tidy&lt;/span&gt;, n &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;35&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 35 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word     &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; nautilus &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; island&#39;s &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; hermit   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; heiress  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; still    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; lives    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; through  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; winter   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;11&lt;/span&gt;&lt;span&gt; spartan  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;12&lt;/span&gt;&lt;span&gt; cottage  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;13&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;14&lt;/span&gt;&lt;span&gt; sheep    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;15&lt;/span&gt;&lt;span&gt; still    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;16&lt;/span&gt;&lt;span&gt; graze    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;17&lt;/span&gt;&lt;span&gt; above    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;18&lt;/span&gt;&lt;span&gt; the      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;19&lt;/span&gt;&lt;span&gt; sea      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;20&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;21&lt;/span&gt;&lt;span&gt; son&#39;s    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;22&lt;/span&gt;&lt;span&gt; a        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;23&lt;/span&gt;&lt;span&gt; bishop   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;24&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;25&lt;/span&gt;&lt;span&gt; farmer   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;26&lt;/span&gt;&lt;span&gt; is       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;27&lt;/span&gt;&lt;span&gt; first    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;28&lt;/span&gt;&lt;span&gt; selectman&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;29&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;30&lt;/span&gt;&lt;span&gt; our      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;31&lt;/span&gt;&lt;span&gt; village  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;32&lt;/span&gt;&lt;span&gt; she&#39;s    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;33&lt;/span&gt;&lt;span&gt; in       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;34&lt;/span&gt;&lt;span&gt; her      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;35&lt;/span&gt;&lt;span&gt; dotage&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Punctuation has been stripped and all words are lower case, but possessives and contractions are preserved (fancy usage of &lt;code&gt;str_&lt;/code&gt; regular expression functions under the hood&amp;hellip;).&lt;/p&gt;
&lt;h2 id=&#34;bakeoff&#34;&gt;Bakeoff!&lt;/h2&gt;
&lt;p&gt;Now that we have the basic idea, let&amp;rsquo;s look at a more interesting data set, from the &lt;code&gt;bakeoff&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;First we&amp;rsquo;ll create a data frame with just the &lt;code&gt;signature&lt;/code&gt; column from the &lt;code&gt;bakes&lt;/code&gt; data set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;bakes&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;signature&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;signature_df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 548 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    signature                                                                    &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;                                                                        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Light Jamaican Black Cakewith Strawberries and Cream&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Chocolate Orange Cake&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                                      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Caramel Cinnamon and Banana Cake&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                           &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Fresh Mango and Passion Fruit Hummingbird Cake&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                             &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Carrot Cake with Lime and Cream Cheese Icing&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                               &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Cranberry and Pistachio Cakewith Orange Flower Water Icing&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Carrot and Orange Cake&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                                     &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Sticky Marmalade Tea Loaf&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                                  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Triple Layered Brownie Meringue Cake\nwith Raspberry Cream&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Three Tiered Lemon Drizzle Cakewith Fresh Cream and freshly made Lemon Curd&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 538 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next we tokenize by word on the signature column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;signature_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/tidytext/man/unnest_tokens.html&#39;&gt;unnest_tokens&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;signature&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;signature_tidy&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2,762 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word        &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; light       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; jamaican    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; black       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; cakewith    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; strawberries&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; and         &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; cream       &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; chocolate   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; orange      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; cake        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 2,752 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we want to count those tokens: i.e. we want to collapse all duplicate word tokens into a single word type, with the corresponding frequency. Since we now have tidy data, dplyr to the rescue!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dplyr &lt;code&gt;count()&lt;/code&gt; lets you quickly count the unique values of one or more variables. The option &lt;code&gt;sort&lt;/code&gt;, if TRUE, will show the largest groups at the top.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;signature_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span class=&#39;nf&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, sort &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 806 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word          n&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; and         321&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; cake         66&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; chocolate    61&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; orange       42&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; with         42&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; pie          37&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; apple        34&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; ginger       30&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; lemon        29&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; biscuits     26&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 796 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re way more interested in &lt;code&gt;cake&lt;/code&gt; than &lt;code&gt;and&lt;/code&gt;: this is an example of a &lt;strong&gt;stop word&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, stop words are words which are filtered out before or after processing of natural language data (text). &amp;ldquo;stop words&amp;rdquo; usually refers to the most common words in a language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One of our major performance (search) optimizations&amp;hellip; is removing the top 10,000 most common English dictionary words (as determined by Google search). It&amp;rsquo;s shocking how little is left of most posts once you remove the top 10k English dictionary words&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tidytext package has a database of just over a thousand of these words, including &amp;lsquo;and&amp;rsquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;stop_words&lt;/span&gt;, n &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;30&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 1,149 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word        lexicon&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; a           SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; a&#39;s         SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; able        SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; about       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; above       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; according   SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; accordingly SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; across      SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; actually    SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; after       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;11&lt;/span&gt;&lt;span&gt; afterwards  SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;12&lt;/span&gt;&lt;span&gt; again       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;13&lt;/span&gt;&lt;span&gt; against     SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;14&lt;/span&gt;&lt;span&gt; ain&#39;t       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;15&lt;/span&gt;&lt;span&gt; all         SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;16&lt;/span&gt;&lt;span&gt; allow       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;17&lt;/span&gt;&lt;span&gt; allows      SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;18&lt;/span&gt;&lt;span&gt; almost      SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;19&lt;/span&gt;&lt;span&gt; alone       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;20&lt;/span&gt;&lt;span&gt; along       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;21&lt;/span&gt;&lt;span&gt; already     SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;22&lt;/span&gt;&lt;span&gt; also        SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;23&lt;/span&gt;&lt;span&gt; although    SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;24&lt;/span&gt;&lt;span&gt; always      SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;25&lt;/span&gt;&lt;span&gt; am          SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;26&lt;/span&gt;&lt;span&gt; among       SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;27&lt;/span&gt;&lt;span&gt; amongst     SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;28&lt;/span&gt;&lt;span&gt; an          SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;29&lt;/span&gt;&lt;span&gt; and         SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;30&lt;/span&gt;&lt;span&gt; another     SMART  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 1,119 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that the name of the stop word column is &lt;code&gt;word&lt;/code&gt;, and the name we used in our tokenized column is &lt;code&gt;word&lt;/code&gt; (now you will see why we used that name) so we can use dplyr&amp;rsquo;s &lt;code&gt;anti_join()&lt;/code&gt; to filter the word tokens!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;anti_join()&lt;/code&gt; returns all rows from x without a match in y (where x are the word tokens, and y are the stop words)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;signature_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span class=&#39;nf&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, sort &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span class=&#39;nf&#39;&gt;anti_join&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;stop_words&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Joining, by = &#34;word&#34;&lt;/span&gt;


&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 762 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word          n&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; cake         66&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; chocolate    61&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; orange       42&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; pie          37&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; apple        34&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; ginger       30&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; lemon        29&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; biscuits     26&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; loaf         22&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; walnut       22&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 752 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since we are in the tidyverse, we can pipe our results into ggplot. First we filter on counts above a certain threshold (here 12, just for visualization purposes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;geom_col&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is ordered alphabetically by default, bottom to top; but we can reorder by count (n) using dplyr &lt;code&gt;mutate()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;word &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/reorder.factor.html&#39;&gt;reorder&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;geom_col&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We now have everything we need for a word cloud: word types and their token frequencies:&lt;/p&gt;
&lt;p&gt;The only &lt;strong&gt;obligatory&lt;/strong&gt; arguments to &lt;a href=&#34;https://rdrr.io/pkg/wordcloud/man/wordcloud.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;wordcloud()&lt;/code&gt;&lt;/a&gt; are the first two: the rest just let you tweak the graphic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/wordcloud/man/wordcloud.html&#39;&gt;wordcloud&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;words &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, 
          freq &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;signature_count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;, 
          min.freq &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, 
          random.order&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, 
          rot.per&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;0.3&lt;/span&gt;, 
          colors&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;brewer.pal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Dark2&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;min.freq&lt;/code&gt; lets you filter on a frequency threshold. &lt;code&gt;random.order=FALSE&lt;/code&gt; plots words in decreasing frequency (highest most central); &lt;code&gt;rot.per&lt;/code&gt; is the proportion of words with 90 degree rotation; &lt;code&gt;colors=brewer.pal(8, &amp;quot;Dark2&amp;quot;)&lt;/code&gt; lets you choose an &lt;a href=&#34;https://www.r-graph-gallery.com/38-rcolorbrewers-palettes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RColorBrewer&lt;/a&gt; color palette of your choice.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Lemmatization&lt;/p&gt;
&lt;p&gt;If you create a count data frame of &lt;code&gt;signature_tidy&lt;/code&gt; without the &lt;code&gt;sort = TRUE&lt;/code&gt; option, the words are sorted alphabetically. And if you look through that table you will see many instances such as &lt;code&gt;apple, apples;  apricot, apricots; cake, cakes&lt;/code&gt; etc. Arguably, these are the same word type (think &amp;ldquo;dictionary word&amp;rdquo;) just grammatical variations. Properly collapsing these into a single type is called &lt;strong&gt;lemmatization&lt;/strong&gt;: a very difficult problem which would take us far afield into the &lt;strong&gt;morphology of words&lt;/strong&gt;. Again in general there are many exceptions, only partly due to English borrowing so many words from other languages: besides &lt;code&gt;apple, apples&lt;/code&gt; there is &lt;code&gt;mouse, mice; self, selves; bacillus, bacilli; basis, bases&lt;/code&gt;. etc. These are known as &lt;a href=&#34;https://www.thoughtco.com/irregular-plural-nouns-in-english-1692634&#34;&gt;irregular plurals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Verbs are worse! Perhaps you would also consider the inflectional forms &lt;code&gt;run, runs, ran, running&lt;/code&gt; as the same type, just as a dictionary does. How do you reduce those algorithmically? And if you consider inflectional forms as the same dictionary word, how would you tackle Ancient Greek, which has &lt;strong&gt;hundreds&lt;/strong&gt; of inflected forms for the same verb? Here are just a few, there are pages and pages of them&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;greek.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Currently machine learning has been unleashed on this problem, with limited success. The traditional computational linguists&#39; algorithms are still winning&amp;hellip;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;the-gutenbergr-package&#34;&gt;The &lt;code&gt;gutenbergr&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;Say we wanted to do a word cloud for a more substantive text like Darwin&amp;rsquo;s &lt;em&gt;Origin of Species&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gutenberg.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Gutenberg&lt;/a&gt; is a volunteer effort to digitize and archive cultural works and is the oldest digital library. It has over 60,000 books in the public domain (including Darwin&amp;rsquo;s works).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/gutenbergr/vignettes/intro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gutenbergr&lt;/a&gt; package allows you to download any of these works &lt;strong&gt;directly into a data frame&lt;/strong&gt; using just the Project Gutenberg ID. This is then perfect input for tidytext. The package provides all the metadata to search for author and work IDs inside R (you can also just find the ID by searching on the Project Gutenberg website):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;darwins_works&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;gutenberg_metadata&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;author&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Darwin, Charles&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;darwins_works&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 40 x 8&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    gutenberg_id title author gutenberg_autho… language gutenberg_books… rights&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;           &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;          944 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       Travel/Harvard … Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;&lt;span&gt;227 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;&lt;span&gt;228 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;On … Darwi…              485 en       Harvard Classic… Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       Harvard Classic… Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;010 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;087 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Lif… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;088 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;Lif… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;300 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;355 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;span&gt;               Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;485 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;The… Darwi…              485 en       Botany           Publi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 30 more rows, and 1 more variable: has_text &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;lgl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An inspection of the results of &lt;em&gt;Origin of Species&lt;/em&gt; on the website reveals that the latest edition is ID 2009. Let&amp;rsquo;s grab it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://docs.ropensci.org/gutenbergr/reference/gutenberg_download.html&#39;&gt;gutenberg_download&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2009&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Determining mirror for Project Gutenberg from http://www.gutenberg.org/robot/harvest&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Using mirror http://aleph.gutenberg.org&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the breakout rooms, we&amp;rsquo;ll work through inspecting the frequencies and creating a word cloud for this text.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gutenbergr&lt;/code&gt; package is extremely useful, but as long as you can read a document into R, you can then convert it to a data frame as we did in the very first example above, and then the tidytext pipeline will work. The &lt;a href=&#34;https://cran.r-project.org/web/packages/readtext/vignettes/readtext_vignette.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;readtext&lt;/a&gt; package can import a variety of formats, including PDFs and Microsoft Word documents.&lt;/p&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout rooms&lt;/h2&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;OoS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gutenberg_download&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2009&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and inspect the data frame. Identify the name of the column you want to tokenize.&lt;/p&gt;
&lt;p&gt;Then use the &lt;a href=&#34;https://rdrr.io/pkg/tidytext/man/unnest_tokens.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;unnest_tokens()&lt;/code&gt;&lt;/a&gt; command to create a data frame of word tokens.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;It&#39;s the &lt;code&gt;text&lt;/code&gt; column you want. &lt;code&gt;gutenbergr&lt;/code&gt; includes the &lt;code&gt;gutenberg_ID&lt;/code&gt; in case you download multiple texts into the same data frame. Remember to name the column in the new data frame &lt;code&gt;word&lt;/code&gt; so we can filter any stop words later on. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://docs.ropensci.org/gutenbergr/reference/gutenberg_download.html&#39;&gt;gutenberg_download&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2009&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;OoS&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 21,556 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    gutenberg_id text                                                            &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;           &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;                                                           &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;1228    1859, First Edition&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;22764   1860, Second Edition&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;2009    1872, Sixth Edition, considered the definitive edition…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&#34;&lt;/span&gt;&lt;span&gt;                                                              &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&#34;&lt;/span&gt;&lt;span&gt;                                                              &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&#34;&lt;/span&gt;&lt;span&gt;                                                              &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&#34;&lt;/span&gt;&lt;span&gt;                                                              &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;On the Origin of Species&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&#34;&lt;/span&gt;&lt;span&gt;                                                              &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;BY MEANS OF NATURAL SELECTION,&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;&#34;&lt;/span&gt;&lt;span&gt;                                &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 21,546 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;OoS&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/tidytext/man/unnest_tokens.html&#39;&gt;unnest_tokens&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;text&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    
&lt;span class=&#39;nv&#39;&gt;OoS_tidy&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 209,048 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    gutenberg_id word   &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;           &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 1228   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 1859   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 first  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 edition&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 22764  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 1860   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 second &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 edition&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 2009   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;009 1872   &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 209,038 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Count and sort the tokens into a new data frame. Inspect the output. Are there any stop words?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Pipe the &lt;code&gt;word&lt;/code&gt; column of the data frame into the dplyr &lt;code&gt;count()&lt;/code&gt; function with the &lt;code&gt;sort = TRUE&lt;/code&gt; option. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;OoS_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span class=&#39;nf&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, sort &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 9,233 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word      n&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; the   &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;14&lt;/span&gt;&lt;span&gt;570&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; of    &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;&lt;span&gt;438&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; and    &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt;&lt;span&gt;853&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; in     &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;5&lt;/span&gt;&lt;span&gt;414&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; to     &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;4&lt;/span&gt;&lt;span&gt;753&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; a      &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;3&lt;/span&gt;&lt;span&gt;368&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; that   &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;749&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; as     &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; have   &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; be     &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;099&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 9,223 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Remove the stop words from the output and inspect the results.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Use &lt;code&gt;antijoin()&lt;/code&gt; with the tidytext &lt;code&gt;stop_words&lt;/code&gt; data frame: &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;OoS_tidy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, sort &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span class=&#39;nf&#39;&gt;anti_join&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;stop_words&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Joining, by = &#34;word&#34;&lt;/span&gt;


&lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 8,678 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    word          n&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; species    &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;1&lt;/span&gt;&lt;span&gt;921&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; forms       565&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; selection   561&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; natural     535&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; varieties   486&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; plants      471&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; animals     436&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; distinct    357&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; life        350&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; nature      325&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 8,668 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Visualize the counts using &lt;code&gt;ggplot()&lt;/code&gt;, from highest frequency to lowest, using a frequency cutoff of 200. Does any one word stand out in any way?&lt;/p&gt;
&lt;p&gt;Does the tidytext package perform lemmatization? Are there any irregular plurals in this result?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Use a dplyr &lt;code&gt;filter()&lt;/code&gt; command on the &lt;code&gt;n&lt;/code&gt; column, and, well just look at the examples in the presentation for the details of piping it into &lt;code&gt;ggplot()&lt;/code&gt;! &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;word &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/reorder.factor.html&#39;&gt;reorder&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;geom_col&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
    &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-21-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;tidytext does not lemmatize. There are many plurals in this list, so undoubtedly there are corresponding singulars of lower frequency. Indeed we see both &lt;code&gt;forms&lt;/code&gt; and &lt;code&gt;form&lt;/code&gt;. And of course the irregular &lt;code&gt;genera&lt;/code&gt; is the plural of &lt;code&gt;genus&lt;/code&gt;.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-5&#34;&gt;Exercise 5&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Create a word cloud of this data frame, with the same frequency cut off as the &lt;code&gt;ggplot()&lt;/code&gt; (200). Otherwise use the same settings as in the presentation. Tweak those settings, especially the frequency threshold and rotation proportion. See what happens when you set &lt;code&gt;random.order=TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;The option for the the frequency threshold is &lt;code&gt;min.freq = 200&lt;/code&gt;. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/wordcloud/man/wordcloud.html&#39;&gt;wordcloud&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;words &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;word&lt;/span&gt;, 
          freq &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;OoS_count&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;n&lt;/span&gt;, 
          min.freq &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;200&lt;/span&gt;, 
          random.order&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, 
          rot.per&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;0.35&lt;/span&gt;, 
          colors&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;brewer.pal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Dark2&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-22-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Session 14: Writing your own Functions</title>
      <link>https://biodash.github.io/codeclub/14_functions/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/14_functions/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn another way to avoid repetition in your code by creating your own functions.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a function in R.&lt;/li&gt;
&lt;li&gt;Learn to incorporate your own functions into &lt;code&gt;for&lt;/code&gt; loops and functionals like &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Learn all the advantages of using functions instead of copied code blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We&amp;rsquo;ll be using &lt;code&gt;tibble()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; from the tidyverse packages, so we need to load that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 0.8.5&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.0.3     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.3.1     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;why-write-functions&#34;&gt;Why write functions?&lt;/h2&gt;
&lt;h3 id=&#34;copying-your-code-is-not-good&#34;&gt;Copying your code is &lt;em&gt;not good&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The first motivation for writing a function is when you find yourself cut-and-pasting code blocks with slight alterations each time.&lt;/p&gt;
&lt;p&gt;Say we have the following toy tidyverse data frame, where each column is a vector of 10 random numbers from a normal distribution, with &lt;code&gt;mean = 0&lt;/code&gt; and &lt;code&gt;sd = 1&lt;/code&gt; (the defaults for &lt;code&gt;rnorm&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;         a      b       c       d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;     &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;  0.388  0.736  2.26   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.302&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;  1.19  -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.131&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.17&lt;/span&gt;&lt;span&gt;   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.053&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;  0.971  0.919  0.032&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;9&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.227&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.147&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.43&lt;/span&gt;&lt;span&gt;   1.15   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.09&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;  1.87   0.566 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.935&lt;/span&gt;&lt;span&gt;   0.601 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.07&lt;/span&gt;&lt;span&gt;   0.941  1.56   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.413&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;  1.22   0.637  1.62    0.976 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.142&lt;/span&gt;&lt;span&gt;  1.02   1.98    1.22  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.02&lt;/span&gt;&lt;span&gt;   0.499 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.93&lt;/span&gt;&lt;span&gt;   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.091&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;  0.177  0.347  1.79    1.55&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In previous Code Clubs we&amp;rsquo;ve seen how you can apply a built-in function like &lt;code&gt;median&lt;/code&gt; to each column using a &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;lapply&lt;/code&gt;. But say we wanted to do something a bit fancier that is not part of core R. For example, we can &lt;em&gt;normalize&lt;/em&gt; the values in a column so they range from 0 to 1 using the following code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.6193844 0.8252053 0.7693140 0.4817556 1.0000000 0.2453463 0.8345409&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.4828838 0.0000000 0.5650749&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code is a literal translation of the mathematical formula for normalization:&lt;/p&gt;
&lt;p&gt;$$z_{i} = \frac{x_{i} - min(x)}{max(x)-min(x)}$$ OK, so how can we do this for each column? Here is a first attempt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        a       b      c     d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; 0.619  0.301  1      0.491&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; 0.825 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.053&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;5&lt;/span&gt;&lt;span&gt; 0      0.559&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; 0.769  0.376  0.497  0.512&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; 0.482 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.582&lt;/span&gt;&lt;span&gt;  0.749  0    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; 1      0.231  0.278  0.739&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; 0.245  0.384  0.843  0.461&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; 0.835  0.260  0.855  0.842&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; 0.483  0.418  0.938  0.910&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; 0      0.204  0.053&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt; 0.549&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; 0.565  0.142  0.895  1&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This works, but it caused me mental anguish to type it out. Even with cut and paste! All those manual textual substitutions!! And manual data entry is prone to mistakes, especially repetitive tasks like this. And say you had 1,000 columns&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And it didn&amp;rsquo;t work!!&lt;/strong&gt; Honestly, I swear that mistake was totally real: I didn&amp;rsquo;t notice it until I looked at the output. Can you spot the mistake?&lt;/p&gt;
&lt;p&gt;It turns out R has a &lt;code&gt;range&lt;/code&gt; function that returns the minimum and maximum of a vector, which somewhat simplifies the coding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The result is a vector something like &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c(-1.2129504, 2.1011248)&lt;/code&gt;&lt;/a&gt; (it varies run to run, since the columns values are random) which we can index, and so we only do the min/max computation once for each column, instead of three times, so we get the following block of code for each column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Does this help?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Still pretty horrible, and arguably worse since we add a line for each column.&lt;/p&gt;
&lt;p&gt;How can we distill this into a function to avoid all that repetition?&lt;/p&gt;
&lt;h3 id=&#34;encapsulation-of-code-in-a-function&#34;&gt;Encapsulation of code in a function&lt;/h3&gt;
&lt;p&gt;The secret to function writing is abstracting the &lt;em&gt;constant&lt;/em&gt; from the &lt;em&gt;variable&lt;/em&gt;. (Using the &lt;code&gt;range&lt;/code&gt; function does throw into sharper relief what is constant and what is varying at least.) The constant part is the &lt;strong&gt;body&lt;/strong&gt; of the function: the template or boiler-plate you use over and over again. The variable parts are the &lt;strong&gt;arguments&lt;/strong&gt; of the function. We also need to give the function a &lt;strong&gt;name&lt;/strong&gt;, so we can call it and reuse it. The template for a function is then:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# do something with arg1, arg2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arguments go inside &lt;code&gt;(...)&lt;/code&gt;. The body is the block of code you want to reuse, and it&amp;rsquo;s contained in curly brackets &lt;code&gt;{...}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like in this case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Pretty cool, right? Here &lt;code&gt;normalize&lt;/code&gt; is the descriptive name we give the function.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;assign&lt;/strong&gt; the function to the name using &lt;a href=&#34;https://rdrr.io/r/base/assignOps.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/a&gt; just like any other value. This means that now &lt;code&gt;normalize&lt;/code&gt; is a function object, just like you create vector objects, or list or data frame objects, when you assigned them to names. Notice too that in RStudio they appear in the Global Environment in a special section, and clicking on them shows the code. This means that if you have a large file of code with many functions defined, you don&amp;rsquo;t have to go back searching for the function definition in the code itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;environment_pane.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is the &lt;strong&gt;argument&lt;/strong&gt; of the function. In the current case this is a data frame column vector, but we can potentially use this function on &lt;em&gt;any&lt;/em&gt; vector, so let&amp;rsquo;s not be too specific. The more generally you can write your function, the more useful it will be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8.657&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;80&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.000000000 0.051948052 0.001838866 0.073467532 1.000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When we &lt;strong&gt;call&lt;/strong&gt; the function, the value we use in the function call is &lt;strong&gt;assigned&lt;/strong&gt; to &lt;code&gt;x&lt;/code&gt; and is &lt;strong&gt;passed in&lt;/strong&gt; to the body of the function. So if we call the function on the first column, it gets passed in to the body, and returns the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.8726863 1.0000000 0.8764474 0.5618469 0.6111361 0.4147958 0.2889830&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.2683500 0.7181709 0.0000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A couple of things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Including that extra line &lt;code&gt;rng &amp;lt;- range(x)&lt;/code&gt; is no longer a problem, since we just type it once. If you are typing things out over and over you might prefer brevity. &lt;em&gt;When you write a function, you should prefer clarity.&lt;/em&gt; It&amp;rsquo;s good practice to break the the function down into logical steps, and name them properly. It&amp;rsquo;s much easier for others to &amp;lsquo;read&amp;rsquo; your function, and much easier for you when you come back to it in a couple of years. This is the principle of making your code &amp;lsquo;self-annotated&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions should be simple, clear, and do &lt;em&gt;one thing well&lt;/em&gt;. You create programs by combining simple functions in a modular manner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s something very important but rather subtle about this use of the argument. As noted in &lt;a href=&#34;https://biodash.github.io/codeclub/12_loops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodeClub 12&lt;/a&gt;, once a &lt;code&gt;for&lt;/code&gt; loop completes, the variable you&amp;rsquo;re using &lt;em&gt;keeps the value it had&lt;/em&gt; at the last iteration of the loop, which persists in the global environment. Below we&amp;rsquo;ll compare that behavior to what happens with the function&amp;rsquo;s &lt;code&gt;x&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our original horrible code can now be rewritten as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Which is an improvement, but the real power comes from the fact that we can use our new function in &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;apply&lt;/code&gt; statements. Here is the data from the previous couple of Clubs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;17&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;93&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;56&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;19&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;175&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;40&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;69&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;267&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;91&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;87&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;143&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;103&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;223&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;106&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;18&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;87&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;72&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;59&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s first sanity check that our new function behaves sensibly on these vectors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; 

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And while we&amp;rsquo;re here, let&amp;rsquo;s circle back to the assignment of the &lt;code&gt;x&lt;/code&gt; argument outside and inside the function. Below we first assign a value to &lt;code&gt;x&lt;/code&gt; outside the function; pass in a value to &lt;code&gt;x&lt;/code&gt; inside the function; then reevaluate &lt;code&gt;x&lt;/code&gt; outside the function call, to see what happens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;             &lt;span class=&#39;c&#39;&gt;# inside the function, x &amp;lt;- dists_Mar5&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Whatever value &lt;code&gt;x&lt;/code&gt; has outside the function does not affect, and is not affected by, the value of &lt;code&gt;x&lt;/code&gt; inside the function. In computer science terms we say the variable(s) used inside the function are &lt;strong&gt;local&lt;/strong&gt; to the function. They are freshly minted inside it, and safely destroyed before you leave it. So there is no chance of weird or unexpected conflicts with whatever variable values are set outside. In contrast, the variable in the for loop is &lt;strong&gt;global&lt;/strong&gt;. It &amp;lsquo;leaks out&amp;rsquo; from where you actually used it, with perhaps unforeseen consequences. This is extremely important when you start embedding your own functions in larger programs.&lt;/p&gt;
&lt;h3 id=&#34;default-values-for-arguments&#34;&gt;Default values for arguments&lt;/h3&gt;
&lt;p&gt;In R, we can assign a default value for an argument using &lt;a href=&#34;https://rdrr.io/r/base/assignOps.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/a&gt; assignment. This means the argument will be called automatically, but can be overridden if explicitly called. First we create a function in the usual way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;variable_power&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;  
  &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;**&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;               &lt;span class=&#39;c&#39;&gt;# raises x to the power p&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And now we create a version with a default value for the power:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;variable_power_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;**&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;functions-in-for-loops&#34;&gt;Functions in &lt;code&gt;for&lt;/code&gt; loops&lt;/h3&gt;
&lt;p&gt;Here is how we can use our new function in a &lt;code&gt;for&lt;/code&gt; loop over a data frame. In our previous examples of &lt;code&gt;for&lt;/code&gt; loops &lt;code&gt;median&lt;/code&gt; was a summary statistic and we return a single value for each column, so we created an empty vector of the desired length to hold the values for each column. Here we want to modify the original data frame with the same dimensions and column names. The following code copies the original data frame (so we don&amp;rsquo;t destroy it) and then modifies the copy &amp;lsquo;in place&amp;rsquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;ncol&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dists_Mar4 dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1  0.04942966 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2  0.33840304 0.63302752&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3  0.19771863 0.44954128&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4  0.05703422 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5  0.65019011 0.46330275&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6  0.13688213 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 7  0.24714829 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 8  1.00000000 0.30733945&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 9  0.00000000 0.24770642&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 10 0.33079848 0.00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Copying an entire data frame &lt;em&gt;could&lt;/em&gt; take a lot of time. So we can also create an empty data frame (of the same dimensions) and populate it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;length &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;nrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;norm_Mar4 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;, norm_Mar5 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;ncol&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    norm_Mar4 norm_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;    0.049&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;4&lt;/span&gt;&lt;span&gt;    0.376 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;    0.338     0.633 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;    0.198     0.450 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;    0.057&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;0&lt;/span&gt;&lt;span&gt;    1     &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;    0.650     0.463 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;    0.137     0.059&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;    0.247     0.376 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;    1         0.307 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;    0         0.248 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;    0.331     0&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;By writing our own function, we&amp;rsquo;ve effectively extended what R can do. And this is all that packages are: libraries of new functions that extend the capabilities of base R. In fact, if there are functions you design for your particular subject area and find yourself using all the time, you can make your own package and load it, and all your favorite functions will be right there (but that&amp;rsquo;s for another day&amp;hellip;)&lt;/p&gt;
&lt;h2 id=&#34;functional-programming-with-your-own-functions&#34;&gt;Functional programming with your own functions&lt;/h2&gt;
&lt;p&gt;We saw above that you assign the function object to a name, just as you would a vector, list or data frame. In R, functions are &amp;lsquo;first class citizens&amp;rsquo;, which means you can &lt;strong&gt;pass them as arguments to another function&lt;/strong&gt;. This is a very powerful idea, and part of the program of &lt;strong&gt;functional programming&lt;/strong&gt; (we introduced this idea in &lt;a href=&#34;https://biodash.github.io/codeclub/13_apply/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Session 13&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In functional programming, functions are treated as first-class citizens, meaning that they can be bound to names&amp;hellip;, passed as arguments, and returned from other functions, just as any other data type can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functions that take other functions as arguments are sometimes referred to as &lt;strong&gt;functionals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the previous session we showed how to use built-in functions like &lt;code&gt;median&lt;/code&gt; as arguments to functionals. The functions you write yourself can also be used in exactly the same way.&lt;/p&gt;
&lt;h3 id=&#34;lapply&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We introduced this functional in &lt;a href=&#34;https://biodash.github.io/codeclub/13_apply/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Session 13&lt;/a&gt;: it always returns a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/lapply.html&#39;&gt;lapply&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sapply()&lt;/code&gt;&lt;/a&gt; attempts to simplify the outputs. Here both lists are of type &lt;code&gt;num&lt;/code&gt;, and the same length, so in this case R simplifies to a &lt;strong&gt;matrix&lt;/strong&gt; data structure with a single type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/lapply.html&#39;&gt;sapply&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;       dists_Mar4 dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1,] 0.04942966 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [2,] 0.33840304 0.63302752&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [3,] 0.19771863 0.44954128&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [4,] 0.05703422 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [5,] 0.65019011 0.46330275&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [6,] 0.13688213 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7,] 0.24714829 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8,] 1.00000000 0.30733945&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [9,] 0.00000000 0.24770642&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [10,] 0.33079848 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 10  2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:10, 1:2] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;dimnames&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : NULL&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr [1:2] &#34;dists_Mar4&#34; &#34;dists_Mar5&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; yields a named list, &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sapply()&lt;/code&gt;&lt;/a&gt; yields a named matrix.&lt;/p&gt;
&lt;h3 id=&#34;purrrmap&#34;&gt;&lt;code&gt;purrr::map()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The functional &lt;code&gt;map()&lt;/code&gt; from the &lt;strong&gt;purrr&lt;/strong&gt; package behaves the same as &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt;, it always returns a list (purrr is automatically loaded as part of the tidyverse):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice another advantage of both &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;: &lt;em&gt;we don&amp;rsquo;t need to explicitly preallocate any kind of data structure to collect the results&lt;/em&gt;. The allocation is done behind the scenes as part of the implementation of &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;, which makes sure they run efficiently. In fact, R implements these functionals as a &lt;code&gt;for&lt;/code&gt; loop behind the scenes, and in &lt;code&gt;map()&lt;/code&gt; that &lt;code&gt;for&lt;/code&gt; loop is implemented in C, so it optimizes performance.&lt;/p&gt;
&lt;p&gt;If we want the output to be a data frame to match the input, we can simply &lt;strong&gt;coerce&lt;/strong&gt; it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nv&#39;&gt;as_tibble&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; tibble [10 × 2] (S3: tbl_df/tbl/data.frame)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;advantages-of-using-functions&#34;&gt;Advantages of using functions&lt;/h3&gt;
&lt;p&gt;Functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoid duplication, save time&lt;/li&gt;
&lt;li&gt;avoid coding errors in repetitive code&lt;/li&gt;
&lt;li&gt;localize variables, avoiding unexpected assignment surprises&lt;/li&gt;
&lt;li&gt;let you modify code in a single place, not multiple places&lt;/li&gt;
&lt;li&gt;lets you reuse code, since a single function can often be used on multiple inputs (vectors, lists and data frames), and can be imported from a package, instead of copy and paste.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout rooms&lt;/h2&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;R does not have a built-in function for calculating the &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Coefficient_of_variation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coefficient of variation&lt;/a&gt;, aka the &lt;strong&gt;RSD&lt;/strong&gt; (relative standard deviation). This is defined as &lt;em&gt;the ratio of the standard deviation to the mean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Create a function that computes this, and test it on a couple of vectors.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;The relevant R built-ins are &lt;code&gt;sd()&lt;/code&gt; and &lt;code&gt;mean()&lt;/code&gt;. The function should have one argument, which is assumed to be a vector. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;cv&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/sd.html&#39;&gt;sd&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;cv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.5759123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Write a function &lt;code&gt;equalish()&lt;/code&gt; which compares two numbers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and checks if they are &amp;lsquo;equal enough&amp;rsquo; according to some threshold &lt;code&gt;epsilon&lt;/code&gt;. Set a &lt;strong&gt;default&lt;/strong&gt; threshold of 0.000001. The function should return TRUE if the absolute value of the difference is inside this threshold.&lt;/p&gt;
&lt;p&gt;Check that it works on a couple of test numbers.&lt;/p&gt;
&lt;p&gt;Now pass in a couple of test vectors. Is this new function vectorized?&lt;/p&gt;
&lt;p&gt;Now call the function explicitly with a different threshold.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;You&#39;ll need to use the absolute value function &lt;code&gt;abs()&lt;/code&gt;, and the logical comparison operator for &#34;less than&#34;. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;equalish&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;epsilon&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/MathFun.html&#39;&gt;abs&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;epsilon&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.01&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] FALSE&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.000000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.000000001&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  TRUE FALSE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;0.000000000000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] FALSE FALSE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.m.wikipedia.org/wiki/FASTQ_format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastq&lt;/a&gt; file format for DNA sequencing uses a letter/punctuation code for the quality of the base called at each position (the fourth line below) which is in one-to-one relationship to the bases in the second line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SIM:1:FCX:1:15:6329:1045 1:N:0:2
TCGCACTCAACGCCCTGCATATGACAAGACAGAATC
+
&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To translate a letter code into a numerical &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Phred_quality_score&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phred quality score&lt;/a&gt; we have to do two things: (i) translate the &lt;strong&gt;character&lt;/strong&gt; to an &lt;strong&gt;integer&lt;/strong&gt; using the &lt;a href=&#34;http://www.asciitable.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASCII code&lt;/a&gt; look up table (ii) subtract 33 from that value (!).&lt;/p&gt;
&lt;p&gt;For the first step, R has a function that converts a character into an integer according to that table, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;!&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 33&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Write a function &lt;code&gt;phred_score()&lt;/code&gt; that computes the phred score for any character. Check that it returns 0 for &amp;ldquo;!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Apply your function to our example string&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to convert it to phred quality scores.&lt;/p&gt;
&lt;p&gt;Mini Bonus: Why is &amp;ldquo;33&amp;rdquo; the magic number?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;p&gt;&lt;br&gt;Remember when you pass the value to the function it has to be an R character string.&lt;/p&gt;
&lt;p&gt;Mini Bonus: look at the &lt;strong&gt;position&lt;/strong&gt; of &amp;ldquo;!&amp;rdquo; in the ASCII table linked above and its raw ASCII integer value. &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;phred_score&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;phred_score&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 27 29 26  2  2 28 29 27 24 28 32 32 32 32 32 32 32 32 32 32 24  2 25 27  2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [26] 27 26 27 27 27 30 30 30 30  2 28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;ldquo;!&amp;rdquo; is the first &lt;strong&gt;printing character&lt;/strong&gt; in the ASCII table. The previous characters were used historically to control the behavior of teleprinters: &amp;ldquo;the original ASCII specification included 33 non-printing control codes which originated with Teletype machines; most of these are now obsolete&amp;rdquo;. If the ASCII table started with &amp;ldquo;!&amp;rdquo; we wouldn&amp;rsquo;t need the correction (!). &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Session 9: Subsetting</title>
      <link>https://biodash.github.io/codeclub/09_subsetting/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/09_subsetting/</guid>
      <description>&lt;figure&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;shaker.png&#34; width=&#34;35%&#34;&gt;
&lt;figcaption&gt;
Image from &lt;a href=&#34;https://r4ds.had.co.nz&#34; class=&#34;uri&#34;&gt;https://r4ds.had.co.nz&lt;/a&gt;
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;/figure&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the uses of R&amp;rsquo;s three basic subsetting operators: &lt;code&gt;[ ]&lt;/code&gt;, &lt;code&gt;[[ ]]&lt;/code&gt;, and &lt;a href=&#34;https://rdrr.io/r/base/Extract.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn how the behavior of these operators varies depending on the &lt;strong&gt;data structure&lt;/strong&gt; you are subsetting (vector, matrix, list, or data frame).&lt;/li&gt;
&lt;li&gt;Prepare to learn how these resemble, and differ from, subsetting operators in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-what-is-subsetting-anyway&#34;&gt;Intro: What is &amp;lsquo;subsetting&amp;rsquo; anyway?&lt;/h2&gt;
&lt;p&gt;Subsetting (also known as indexing) is simply a formal way of pulling out specific pieces of a data structure. We&amp;rsquo;ve already seen two &lt;strong&gt;dplyr&lt;/strong&gt; verbs that perform this kind of operation for tibbles: &lt;code&gt;filter&lt;/code&gt; (to pull out specific rows) and &lt;code&gt;select&lt;/code&gt; (to pull out specific columns).&lt;/p&gt;
&lt;p&gt;But these are tidyverse commands, and only work with tibbles. R has two more-basic data structures, vectors and lists, and for these we need different subsetting operators. We&amp;rsquo;ll also see that matrices are simply a special kind of vector, that data frames are a special kind of list, and basic subsetting operators also work for these.&lt;/p&gt;
&lt;p&gt;Since the behavior of these operators depends on the actual data structure you are working with, it&amp;rsquo;s useful when experimenting to use them in conjunction with the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; function, which compactly displays the internal structure of an arbitrary R object. A knowledge of the make-up of these data structures is also important when you come to write your own loops, iterations, and functions.&lt;/p&gt;
&lt;p&gt;The most important distinction between vectors and lists is that vectors are &lt;strong&gt;homogeneous&lt;/strong&gt;, while lists can be &lt;strong&gt;heterogeneous&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Terminological note&lt;/em&gt;: &amp;lsquo;under-the-hood&amp;rsquo; both of these are vectors in the technical sense, and sometimes the distinction is referred to as &lt;strong&gt;atomic vectors&lt;/strong&gt; versus &lt;strong&gt;recursive vectors&lt;/strong&gt;. I&amp;rsquo;ll continue to use just &amp;lsquo;vector&amp;rsquo; and &amp;lsquo;list&amp;rsquo; here. This usage also lines-up with Python.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;
&lt;p&gt;A vector is absolutely the most basic data structure in R. Every value in a vector must be of the &lt;strong&gt;same type&lt;/strong&gt;. Strikingly, this sets R apart from Python. Using this kind of vector in Python requires loading a whole separate package: &lt;code&gt;numpy&lt;/code&gt;. The most basic data structure in Python is the list.&lt;/p&gt;
&lt;p&gt;There are four basic types of vector: integer, double, character, and logical. Vectors are created by hand with the &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c()&lt;/code&gt;&lt;/a&gt; (combine, concatenate) function. We can check the type with the &lt;a href=&#34;https://rdrr.io/r/base/typeof.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;typeof()&lt;/code&gt;&lt;/a&gt; operator. This is totally redundant if you just created the vector yourself, but when you are debugging code or creating a vector using an expression you might want to check exactly what type of vector is being used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5L&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_which2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_which2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_log&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_log&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;logical&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;e&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;character&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What happens when we perform a basic mathematical operation on a vector?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  2  4  6  8 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(This is &lt;em&gt;completely different&lt;/em&gt; than what you obtain when multiplying a Python list).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So it&amp;rsquo;s not just that vectors are a basic R data structure, but R is a &lt;strong&gt;vectorised language&lt;/strong&gt;. In many cases applying an operation to a vector automagically applies the operation to every element in the vector. This means that for many basic operations &lt;code&gt;for&lt;/code&gt; loops and mapping functions, necessary in Python, are not needed in R (although if you write your own functions you will need these iteration tools). In Python we could use a &amp;lsquo;list comprehension&amp;rsquo; (a compact and fast version of a &lt;code&gt;for&lt;/code&gt; loop):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or install the &lt;code&gt;numpy&lt;/code&gt; package that makes vectors and vectorized functions available.&lt;/p&gt;
&lt;p&gt;Vectors have an insanely simple structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:5] 1 2 3 4 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; also displays the type, and RStudio displays the result of &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; in the Values pane.&lt;/p&gt;
&lt;p&gt;For such a simple structure, there are a surprisingly large number of ways to subset a vector. We&amp;rsquo;ll use the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Notice that the number after the decimal point indicates the position (index) of the element of the vector.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Positive integers&lt;/strong&gt; return elements at the specified positions. Any expression that evaluates to a vector of positive integers can be used as the index. The index operator is &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3 2.1&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 3.3 5.4&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 3.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(In R the indices run from 1 to the length of the object: in Python indices run from 0 to length-1).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Negative integers&lt;/strong&gt; exclude elements at the specified positions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 5.4&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Logical vectors&lt;/strong&gt; select elements where the corresponding logical value is TRUE. This is most useful if you can write a &lt;strong&gt;comparison expression&lt;/strong&gt; &lt;code&gt;2 &amp;gt; 3&lt;/code&gt;, &lt;code&gt;4 == 4&lt;/code&gt;, that returns TRUE (or FALSE) for each element of the vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 3.3 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;. One of the unusual features of R as opposed to Python is that you can assign metadata of various kinds to the elements of vectors (and lists). For example, we can assign a &lt;strong&gt;name&lt;/strong&gt; to each element, and then use a character vector as the index expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  Named num [1:4] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;names&#34;)= chr [1:4] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34;&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;   d   c   a &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5.4 3.3 2.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Again, Python has no direct equivalent of this, but we can get a similar effect using a &lt;em&gt;dictionary&lt;/em&gt; data structure, which explicitly assigns a name to each value).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nothing&lt;/strong&gt; (&lt;code&gt;[]&lt;/code&gt;) returns the entire vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is not useful for (one dimensional) vectors, but is behind the notation for extracting rows and columns from matrices. Keep in mind a &amp;ldquo;nothing&amp;rdquo; index returns &amp;ldquo;everything&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;A matrix is simply a vector with a &lt;strong&gt;dimensions&lt;/strong&gt; attribute. Here we convert a vector to a two-dimensional matrix, with two rows and three columns, with &lt;a href=&#34;https://rdrr.io/r/base/dim.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;dim(rows, cols)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8.5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1.6&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;      [,1] [,2] [,3]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1,]  2.1  3.3  8.5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [2,]  4.2  5.4  1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we can index a specific value using comma notation, where the &lt;em&gt;first&lt;/em&gt; index specifies the row, and the &lt;em&gt;second&lt;/em&gt; index the &lt;em&gt;column&lt;/em&gt; (in Python this is reversed):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;,&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And in two dimensions the &lt;strong&gt;nothing&lt;/strong&gt; after the &lt;code&gt;,&lt;/code&gt; returns &lt;strong&gt;every&lt;/strong&gt; column for that row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;,&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4 1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And here is a way of selecting a submatrix (every row for all columns except the first):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;,&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;      [,1] [,2]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1,]  3.3  8.5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [2,]  5.4  1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;There are two main differences between vectors and lists: (i) lists can contain elements of &lt;strong&gt;different types&lt;/strong&gt;; and (ii) lists can contain &lt;strong&gt;other lists&lt;/strong&gt;. This is why lists are sometimes referred to as &lt;strong&gt;recursive vectors&lt;/strong&gt;. We will see examples of these below, but first let&amp;rsquo;s directly compare a &lt;em&gt;list&lt;/em&gt; of numbers to a &lt;em&gt;vector&lt;/em&gt; of numbers, and examine the structure. Lists are constructed with the &lt;a href=&#34;https://rdrr.io/r/base/list.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5.4&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we see the appearance of a new subsetting operator &lt;code&gt;[[ ]]&lt;/code&gt;. What does it yield?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now compare this to the result of using the &lt;code&gt;[ ]&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 4.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The behavior of the &lt;code&gt;[ ]&lt;/code&gt; operator is very different for lists: it selects the element(s) you request, but &lt;em&gt;it always returns a subsetted version of the original list&lt;/em&gt;. It &amp;lsquo;shrinks&amp;rsquo; the original list. There is nothing like this in Python; it&amp;rsquo;s quite unique to R. (The reason this is the case will become clear when we examine data frames.) The &lt;code&gt;[[ ]]&lt;/code&gt; operator on the other hand just returns the object you select.&lt;/p&gt;
&lt;p&gt;As mentioned above, it&amp;rsquo;s quite possible that an element of a list might itself be a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.21&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.22&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]][[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]][[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.22&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This (print) output focuses on content, whereas the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; function focuses on structure, and is very useful for nested lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 4.22&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once we combine nested lists and multiple types, things can get pretty hairy. There are various ways to visualize what&amp;rsquo;s going on. Here is one example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x3&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;lists_structure.png&#34; style=&#34;width:75.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However the printed form provides us a clue on how to extract an individual element from inside a nested list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# m &amp;lt;- list(2.1, list(4.21, 4.22), 3.3, 5.4)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In short, &lt;code&gt;[[ ]]&lt;/code&gt; drills down into a list, while &lt;code&gt;[ ]&lt;/code&gt; returns a diminished version of the original list.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a visualization of various list subsetting operations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a string&#34;&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]][[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]][[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -5&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.14&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num -1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num -5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;figure&gt;&lt;img src=&#34;lists_subsetting.png&#34; style=&#34;width:75.0%&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Subsetting a list, visually.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Here is a recursive pepper shaker, &lt;code&gt;p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;shaker.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is the first packet, but still inside the shaker, &lt;code&gt;p[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;shaker_first_packet.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is the first packet by itself, &lt;code&gt;p[[1]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;packet.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here is the contents of that packet, &lt;code&gt;p[[1]][[1]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pepper.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll play with yet another type of visualization in the exercises.&lt;/p&gt;
&lt;h2 id=&#34;data-frames&#34;&gt;Data frames&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at a simple data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  2 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ y: chr  &#34;a&#34; &#34;b&#34; &#34;c&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So a data frame is basically a list (of columns), with a names attribute for the column names; and with the extra condition that all the columns are of the same length. So we should be able to use our standard list subsetting operators on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_col_1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_col_1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since a data frame is a list, subsetting using &lt;code&gt;[ ]&lt;/code&gt; returns the specified column still inside a data frame. What about &lt;code&gt;[[ ]]&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;[[ ]]&lt;/code&gt; returns the individual column.&lt;/p&gt;
&lt;p&gt;We can also subset a data frame by name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;x&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_nname&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;x&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_nname&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally &lt;code&gt;df$x&lt;/code&gt; is simply a shorthand for &lt;code&gt;df[[&amp;quot;x&amp;quot;]]&lt;/code&gt; without the &lt;code&gt;[[ ]]&lt;/code&gt; and the &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_dollar_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_dollar_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just as a matter of interest, in the grand scheme of things lists are just a special kind of vector (a &amp;lsquo;heterogeneous recursive vector&amp;rsquo;), so it should be possible to stick a list column into a data frame. We can, but we have to use the &lt;code&gt;I&lt;/code&gt; &amp;lsquo;identity&amp;rsquo; operator around the list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_mixed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, 
  y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/AsIs.html&#39;&gt;I&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7.2&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;string&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_mixed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  2 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ y:List of 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : int 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 7.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr &#34;string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;class&#34;)= chr &#34;AsIs&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;further-reading-and-acknowledgement&#34;&gt;Further reading and acknowledgement&lt;/h4&gt;
&lt;p&gt;For more details on subsetting see &lt;a href=&#34;https://r4ds.had.co.nz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R for Data Science&lt;/a&gt; and &lt;a href=&#34;https://adv-r.hadley.nz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Advanced R&lt;/a&gt; both by Hadley Wickham, from which much of the material in this module was borrowed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;A surprisingly useful operator for extracting elements of a numerical vector is the modulo operator &lt;code&gt;x %% y&lt;/code&gt;. This returns the remainder when &lt;code&gt;x&lt;/code&gt; is divided by &lt;code&gt;y&lt;/code&gt;. It is a vectorized operation, so we can apply it to a list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;9&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%%&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 1 2 0 1 2 0 1 2 0 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Use this operator to extract every third element of the above vector &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;&lt;br&gt;Check the example in the presentation about selecting elements when the logical comparison is TRUE. What is the logical test we need to identify every third element? &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;9&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%%&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3 6 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Here is a visualization of a list:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;train_total.jpg&#34; style=&#34;width:75.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Create a list in R called &lt;code&gt;train&lt;/code&gt; that captures this structure. Print the list, and also display its structure.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;&lt;br&gt;This list has no nested lists, it&amp;rsquo;s just a list of vectors and individual values. &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4 5 6&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;For each of the following sub-trains/carriages, determine the subsetting expression by eye, and then check that it works by subsetting your &lt;code&gt;train&lt;/code&gt; list from exercise 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;trains_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt; There&#39;s more than one way to do these; you will have to use both `[ ]` and `[[ ]]` operators. The last two are tricky, experiment with them... &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; list()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;A common use of recursive structures in biology is to represent phylogenetic trees. Create a recursive list in R called &lt;code&gt;tree&lt;/code&gt; which captures the following visual representation&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tree.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt;Start at the top and work down. Start with a simpler subtree, then expand terminals.
&lt;p&gt;Alternatively, start at the bottom with the smallest subtree, then work up, adding sisters into parent nodes.&lt;/p&gt;
&lt;p&gt;In either case, check your working with &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; as you incrementally add structure.&lt;/p&gt;
&lt;p&gt;Notice this is a binary branching tree, so the root node of every subtree should contain two elements.&lt;/p&gt;
&lt;p&gt;One of the tricks with these nested lists is to keep track of paired parentheses&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay calm and recurse.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tree&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tree&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..$ : chr &#34;b&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..$ : chr &#34;c&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr &#34;d&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Session 4: Visualizing Data</title>
      <link>https://biodash.github.io/codeclub/04_ggplot2/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/04_ggplot2/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the philosophy of &lt;strong&gt;coding&lt;/strong&gt; a graphic.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a &lt;strong&gt;ggplot2&lt;/strong&gt; graphic, so you can reuse it for multiple chart types.&lt;/li&gt;
&lt;li&gt;Learn how you can quickly add visual information to a graphic using &lt;strong&gt;aesthetics&lt;/strong&gt; and &lt;strong&gt;layers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-the-ggplot2-philosophy&#34;&gt;Intro: The ggplot2 philosophy&lt;/h2&gt;
&lt;p&gt;We have already seen that in R, instead of manually manipulating data frames as you might do when editing Excel sheets, we &lt;strong&gt;code&lt;/strong&gt; the operations we want to perform using &lt;strong&gt;dplyr&lt;/strong&gt; verbs like &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;inner_join()&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;In a similar way when performing visualization, instead of clicking on a chart type in Excel, we &lt;strong&gt;code the chart&lt;/strong&gt; in R.&lt;/p&gt;
&lt;p&gt;And just as &lt;strong&gt;dplyr&lt;/strong&gt; gives us efficient ways to manipulate data frames, &lt;strong&gt;ggplot2&lt;/strong&gt; (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics (we use these terms interchangeably).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;gg&lt;/strong&gt; in &lt;strong&gt;ggplot2&lt;/strong&gt; stands for &lt;em&gt;grammar of graphics&lt;/em&gt;, a systematic approach for designing statistical plots developed by Leland Wilkinson. The idea behind this was to think about &amp;lsquo;pulling apart&amp;rsquo; various plots into their shared component pieces, then provide code that could put them together again. We can then create new plots like we create new sentences (once we understand this grammar).&lt;/p&gt;
&lt;p&gt;There are two parts to this. First, the &amp;lsquo;nouns and verbs&amp;rsquo; we need to work with plots are very different than those we need to work with data frames. &lt;strong&gt;ggplot2&lt;/strong&gt; is like a mini-language of its own, with its own verbs and syntax.&lt;/p&gt;
&lt;p&gt;Second, this notion of pulling apart a graphic leads to the idea of &lt;em&gt;layers&lt;/em&gt;. You can build up a plot of any complexity by &lt;em&gt;overlaying&lt;/em&gt; different views of the same data.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a learning curve here for sure, but there are a couple of things that help us.&lt;/p&gt;
&lt;p&gt;First, every graphic shares a &lt;em&gt;common template&lt;/em&gt;. This is like thinking about the sentence &amp;ldquo;The cat sat on the mat&amp;rdquo; grammatically as the template &lt;code&gt;NP V PP&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt;oun &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;The cat&amp;rdquo;, &lt;code&gt;V&lt;/code&gt;erb &amp;ldquo;sat&amp;rdquo;, &lt;code&gt;P&lt;/code&gt;repositional &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;on the mat&amp;rdquo;). Once you understand this structure you can &amp;ldquo;say&amp;rdquo; a &lt;em&gt;lot&lt;/em&gt; of different things.&lt;/p&gt;
&lt;p&gt;(And I mean a &lt;em&gt;lot&lt;/em&gt;. The &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot cheat sheet&lt;/a&gt; lists over 40 plot-types, but because this is a language, users can create their own &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensions&lt;/a&gt; that you can also utilize, adding over 80 more.)&lt;/p&gt;
&lt;p&gt;Second, the way we put layers together is identical to the way we use pipes. You can read &lt;code&gt;%&amp;gt;%&lt;/code&gt; as &amp;ldquo;and then&amp;rdquo;: &lt;code&gt;select()&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;mutate()&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;summarize()&lt;/code&gt;. In graphics, we can say &amp;ldquo;show this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer&amp;rdquo;, etc., using a very similar syntax.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;So how does this work in practice? We&amp;rsquo;ll work through visualizing the &lt;strong&gt;iris&lt;/strong&gt; dataset that you&amp;rsquo;ve seen before. This is an extremely famous &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Iris_flower_data_set&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt; that was first analyzed by R. A. Fisher in 1936: &lt;em&gt;The use of multiple measurements in taxonomic problems&lt;/em&gt;. He was attempting to use petal and sepal measurements to discriminate one species from another.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt; is part of the tidyverse package so we need to load that first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# this assumes you&#39;ve already installed tidyverse&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 0.8.5&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.0.3     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.3.1     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And recall that the &lt;strong&gt;iris&lt;/strong&gt; dataset (3 species, 50 observations per species) is automatically available to us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2          4.9         3.0          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3          4.7         3.2          1.3         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4          4.6         3.1          1.5         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5          5.0         3.6          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6          5.4         3.9          1.7         0.4  setosa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What is the correlation between petal length and width in these species? Are longer petals also wider? We can visualize this with a scatterplot. But first let&amp;rsquo;s look a the ggplot template. (Note the package is &lt;strong&gt;ggplot2&lt;/strong&gt;, the command is &lt;code&gt;ggplot&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = &amp;lt;DATA&amp;gt;) + 
  &amp;lt;GEOM_FUNCTION&amp;gt;(mapping = aes(&amp;lt;MAPPINGS&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the obligatory parts of any plot. The first argument to &lt;code&gt;ggplot()&lt;/code&gt; is the data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is not very interesting! but it&amp;rsquo;s notable that it is &lt;em&gt;something&lt;/em&gt;. &lt;code&gt;ggplot()&lt;/code&gt; has created a base coordinate system (a base layer) that we can add visual layers to. The &lt;em&gt;add a layer&lt;/em&gt; operator is &amp;ldquo;&lt;strong&gt;+&lt;/strong&gt;&amp;rdquo;, which is the ggplot equivalent of the pipe symbol, and &lt;strong&gt;it must occur at the end of the line&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The next argument specifies the kind plot we want: scatterplot, bar chart, fitted line, boxplot, pie chart, etc. &lt;strong&gt;ggplot2&lt;/strong&gt; refers to these as &lt;strong&gt;geoms&lt;/strong&gt;: the geometrical object that a plot uses to represent data. You can see an overview of many of these geoms in the &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheet&lt;/a&gt;. The geom for a scatterplot is &lt;code&gt;geom_point()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we also require a &lt;code&gt;mapping&lt;/code&gt; argument, which maps the &lt;em&gt;variables&lt;/em&gt; in the dataset we want to focus on to their &lt;em&gt;visual representation&lt;/em&gt; in the plot.&lt;/p&gt;
&lt;p&gt;And finally we need to specify an &lt;strong&gt;aesthetic&lt;/strong&gt; for the geometric objects in the plot, which will control things like shape, color, transparency, etc. Perhaps surprisingly, for a scatterplot, the x and y coordinates are aesthetics, since these control, not the shape or color, but the relative position of the points in the coordinate system.&lt;/p&gt;
&lt;p&gt;Here is our complete plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly a positive correlation between length and width. And we can make this even more apparent by visually fitting a line to the data, by &lt;em&gt;overlaying&lt;/em&gt; another geom in the same plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-5-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly some code redundancy here, and we really don&amp;rsquo;t want the x, y mapping of these two layers to be independent. We can extract the common mapping information and move it to the top level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So we have the possibility of &lt;em&gt;local&lt;/em&gt; layer specifications, and &lt;em&gt;global&lt;/em&gt; specifications. Global specifications are &lt;em&gt;inherited&lt;/em&gt; by all the local layers.&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-aesthetics&#34;&gt;The power of aesthetics&lt;/h3&gt;
&lt;p&gt;The aim of Fisher&amp;rsquo;s paper was to try to discriminate different species based on their morphological measurements. It looks from this plot that there are two distinct clusters. Do these clusters correspond to different species? There are two clusters, but three species. How can we explore this further?&lt;/p&gt;
&lt;p&gt;Our current plot uses two numeric variables: &lt;code&gt;Petal.Length&lt;/code&gt; and &lt;code&gt;Petal.width&lt;/code&gt;. We can add a third categorical variable, like &lt;code&gt;Species&lt;/code&gt;, to a two dimensional scatterplot by mapping it to a different visual aesthetic. We&amp;rsquo;ve mapped length and width to x,y coordinates. Now we&amp;rsquo;ll simultaneously map species to &lt;code&gt;color&lt;/code&gt; by expanding our list of aesthetics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The R help for a specific geoms will list, among other things, all the aesthetics that geom supports.&lt;/p&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout Rooms&lt;/h2&gt;
&lt;p&gt;In the exercises we&amp;rsquo;ll be looking a little more at the &lt;strong&gt;iris&lt;/strong&gt; data, and in addition, the NHANES data we used last week, and the left-joined bird dataset we built last week in &lt;strong&gt;Excercise 7&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t installed the NHANES dataset do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;NHANES&#34;&lt;/span&gt;, repos &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;http://cran.us.r-project.org&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; The downloaded binary packages are in&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   /var/folders/d4/h4yjqs1560zbsgvrrwbmbp5r0000gn/T//RtmpPvm8W9/downloaded_packages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once installed, load it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A prebuilt joined data set has been loaded on github.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# create a data directory for the new file if you haven&#39;t done so yet:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#39;data/birds&#39;&lt;/span&gt;, recursive &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning in dir.create(&#34;data/birds&#34;, recursive = TRUE): &#39;data/birds&#39; already exists&lt;/span&gt;


&lt;span class=&#39;c&#39;&gt;# set the url&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/04_ggplot2/joined_data.tsv&#39;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# set the path for the downloaded file&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;data/birds/joined_data.tsv&#39;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#download to file&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# read file&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_tsv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Parsed with column specification:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; cols(&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   locality = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   stateProvince = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   eventDate = &lt;span style=&#39;color: #0000BB;&#39;&gt;col_datetime(format = &#34;&#34;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species_en = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_body_mass_g = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_svl_cm = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   longevity_y = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   litter_or_clutch_size_n = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data set, and plot sepal width (y) against sepal length (x) colored by species. Which morphological character, petals or sepals, provides the greatest discrimination between species?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Simply reuse the code we used for petals. You can often leverage code from an old plot for a new one. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-11-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note this solution shows yet another way to position global mapping information: as its own layer. This can help readability and avoid too many nested parentheses.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the NHANES data set to plot body mass index (y) against height (x). Color by gender. Which gender has the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;&lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Gender&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the same plot but now color by physical activity. How active are those people with the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Again, &lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;PhysActive&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Often plotting the data allows us to identify outliers, which may be data-entry errors, or genuinely extreme data. Using the &lt;code&gt;joined_data&lt;/code&gt; set, plot adult body mass (y) against longevity (x). Identify extreme data points at the high end of body mass. How can we identify what these points represent?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Examine the plot to find an appropriate threshold value, and filter the data using that value. How many data points are there passing that threshold? What species are represented by these data points? How many weights are reported? Why is the plot misleading here? &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;longevity_y&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 24089 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 228 x 9&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    species locality stateProvince eventDate           species_en&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; Cygnus… Findlay  Ohio          2008-02-17 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; Cygnus… Dundee   Ohio          2004-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; Cygnus… 44805 A… Ohio          2006-02-18 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; Cygnus… 45011 H… Ohio          2005-02-19 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; Cygnus… 45042 M… Ohio          2009-02-13 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Trumpeter…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; Cygnus… 44813 B… Ohio          2007-02-19 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; Cygnus… Spencer  Ohio          2008-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; Cygnus… 44903 M… Ohio          2009-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; Cygnus… 44601 A… Ohio          2002-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; Cygnus… Avon La… Ohio          2007-02-17 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 218 more rows, and 4 more variables: adult_body_mass_g &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   adult_svl_cm &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;, longevity_y &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;, litter_or_clutch_size_n &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;distinct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species          &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;&lt;span&gt; Cygnus olor      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;&lt;span&gt; Cygnus buccinator&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;distinct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_body_mass_g&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;               &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h2 id=&#34;bonus-a-new-geom&#34;&gt;Bonus, a new geom!&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data and generate a density histogram for sepal length, categorized by species.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Use &lt;code&gt;geom_density()&lt;/code&gt;. Check the help to see what aesthetics it supports. Note that while you &#39;color&#39; a point, you &#39;fill&#39; an area. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_density&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-18-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note, what does the &lt;strong&gt;alpha&lt;/strong&gt; aesthetic control? &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Code Club</title>
      <link>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Welcome to OSU Code Club! Materials for each episode will be provided in posts like this one,
collected in the &lt;a href=&#34;https://biodash.github.io/codeclub/&#34;&gt;Code Club Sessions page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For more information about OSU Code Club, and a form to sign up,
see the &lt;a href=&#34;https://biodash.github.io/codeclub-about/&#34;&gt;About Code Club page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For info on upcoming sessions, see &lt;a href=&#34;https://biodash.github.io/codeclub-schedule/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can code locally or in your browser, see our &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;page with computer setup instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are completely new to R, see our &lt;a href=&#34;https://biodash.github.io/codeclub-novice/&#34;&gt;page with resources and tips&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also &lt;a href=&#34;https://biodash.github.io/codeclub-suggest/&#34;&gt;suggest a topic to be covered at Code Club&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
